<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>视频切片并行加速</title>
      <link href="/posts/4d3edad6.html"/>
      <url>/posts/4d3edad6.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在实际业务中，视频处理，大都时候都挺费时的。例如：以下表格是，某中算法，在不同分辨率、帧率下的，cpu计算耗时体系（不包括：上传、下载的耗时）：<br></p><table><thead><tr><th>分辨率</th><th>帧数</th><th>处理时长 &#x2F; 视频时长</th></tr></thead><tbody><tr><td>720p</td><td>30帧</td><td>2</td></tr><tr><td>720p</td><td>60帧</td><td>4</td></tr><tr><td>1080p</td><td>30帧</td><td>3</td></tr><tr><td>1080p</td><td>60帧</td><td>6</td></tr><tr><td>2k</td><td>30帧</td><td>3.5</td></tr><tr><td>2k</td><td>60帧</td><td>8</td></tr><tr><td>4k</td><td>30帧</td><td>7</td></tr><tr><td>4k</td><td>60帧</td><td>20</td></tr></tbody></table><p>另外，一般情况下，视频越长，所占用的cpu or gpu，也就越久。如此有以下弊端：<br>1、对于用户而言，耗时久，体验非常不好，有可能直接放弃了。<br>2、很容易造成资源负载不均，例如：有些机器比较倒霉，每次分配的都是：长视频（5min以上），有些机器比较luck，分配的大都都是：短视频（30s以内）<br>3、超过1h的视频，单台物理机，基本上不太可能能够处理完毕，姑且不谈cpu，内存都有可能爆满。</p><h2 id="视频处理"><a href="#视频处理" class="headerlink" title="视频处理"></a>视频处理</h2><p>这里面的视频处理，可以是：libx264转码、libx265转码、超分、ai绘画、水印去除、人像增强、去模糊、去躁点等等。</p><h2 id="为啥只谈视频切片？"><a href="#为啥只谈视频切片？" class="headerlink" title="为啥只谈视频切片？"></a>为啥只谈视频切片？</h2><p>切片并行加速，是否支持以下2个场景？</p><p>1、文生视频，可否将：文本切成多段，然后，每段并发分别生成视频，最终合成一个大视频？<br>2、图片切片加速处理，可否将图片按块切片，然后，并发处理每一块，最终合成一个大图片？<br>3、图生视频，可否根据一张图片信息 + 文本信息，可生成一坨帧，合并成一个视频</p><p>根据实际项目上看，暂时不行，尚需深入调研分析。<br>1、文生视频中的：文本是有上下文相关性的，暂时无法做到：将文本降维，变成：上下文无关性。<br>2、图片处理，目前性能不慢，暂时没有切片加速的需求，另外，图片按块来切，貌似也是有上下文相关性。<br>3、图生视频，可以</p><h1 id="思路梳理"><a href="#思路梳理" class="headerlink" title="思路梳理"></a>思路梳理</h1><h2 id="资源扩容"><a href="#资源扩容" class="headerlink" title="资源扩容"></a>资源扩容</h2><p>例如：某一个算法，目前部署在：8核cpu上，可逐步调大cpu 核数 + 内存大小，当然了，资源也是有限的，扩大到一定核数后，并不能100%能解决问题，另外，成本也是一个大问题。</p><h2 id="最强硬件技术"><a href="#最强硬件技术" class="headerlink" title="最强硬件技术"></a>最强硬件技术</h2><p>假设不差钱，可以考虑上：更强型号的cpu or 更强型号的gpu，例如：大型机 or<br>银河系列超级计算机。可惜，就算是上了最强的CPU，在面对：长视频 + 高帧率 +<br>高分辨率的情况下，也有力不从心的时候。</p><h2 id="并行计算策略"><a href="#并行计算策略" class="headerlink" title="并行计算策略"></a>并行计算策略</h2><p>遇到长视频、高帧率、高分辨率的视频，处理慢时，可以考虑将视频切成多个小视频，然后，并行地处理：小视频，最后将它们的结果合并起来，从而得到原先视频的计算结果，典型的并行算法计算的策略。<br>1、切片：分解（Divide）将一个大视频切成多个小视频。<br>2、并行：并行处理这些片段。<br>3、合并：将这些片段的结果合并起来，以获得整体的结果。</p><h3 id="为啥能加速？"><a href="#为啥能加速？" class="headerlink" title="为啥能加速？"></a>为啥能加速？</h3><table><thead><tr><th>能够加速的原因</th><th>重要程度</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>切 -&gt; 并 -&gt; 合，强依赖于：并行调度</td><td>top 0</td><td>单个视频的所有切片并行计算，子任务之间并发执行，尽量不要排队等待。。并发度 &#x3D; 并发执行的任务数 &#x2F; 总的任务数</td><td></td></tr><tr><td>GPU池子 与cpu池子的合理配比</td><td>top 0</td><td>1、如果cpu池子中核数不够多，例如：&lt;&#x3D; 10核，那么大概率起不到加速效果。<br/> 2、如果gpu池子的卡数不够多，例如：一个算法只能调度到一张卡，那么，也起不到加速效果</td><td></td></tr><tr><td>切片策略：各个阶段算法参数，合理设置</td><td>top 0</td><td>切片加速策略</td><td></td></tr><tr><td>开启切片的条件：视频时长</td><td>top 1</td><td>通用策略：如果视频时长 &lt;&#x3D; 1min，触发加速有可能会适得其反，费资源，又更慢（毕竟：切、合是有成本的）。<br/>当然了，不同算法，这个阈值，有可能会不一样，需灵活对待。<br/>不同分辨率 + 不同格式的视频等，是否有这一规律，目前待定，并未找到规律。</td><td></td></tr></tbody></table><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>如上所述，将重点探讨：切片加速的相关方案。大体过程，如下图所示：<br><img src="/images/slice_speed_up.png"><br><img src="/images/slice_dag_1.png"><br>备注：<br>1、上述过程要求：片与片之间，没有关联性，然后，并行处理，来提高处理速度 + 降低对硬件的需求。<br>2、在实际业务中，片与片之间，部分情况下，存在上下文的关联性。其解决思路之一：分析下关联性有什么特点，然后，将这个关联性降维到无关联性。例如：某一算法的加速流程如下图所示：<br><img src="/images/slice_speed_up_2.png"><br><img src="/images/slice_dag_3.png"><br>其整体流程就会由：切 -&gt; 并 -&gt; 合，变成：切 -&gt; 切 -&gt; 合 -&gt; 并 -&gt; 合。<br>3、提取音频时，直接做音频转码，也属于：旁路的并行流程。<br>4、切片 + 处理，需并行处理，是能够提速的关键。</p><h2 id="模块抽象"><a href="#模块抽象" class="headerlink" title="模块抽象"></a>模块抽象</h2><table><thead><tr><th>模块</th><th>功能定位</th><th>是否连db</th><th>是否上传 or 下载</th><th>并发度</th></tr></thead><tbody><tr><td>总控集群</td><td>切片策略、算法编排、任务重试、任务取消、优先级调度等</td><td>是</td><td>否</td><td>高，单个pod基本上要达到300QPS以上(8核cpu，经验值)</td></tr><tr><td>计算集群</td><td>原子化cpu、gpu计算，负责：算</td><td>否</td><td>是</td><td>低，单个pod一般处理：2个以内的视频 or 5个以内的图片（经验值）</td></tr></tbody></table><h2 id="总控进程"><a href="#总控进程" class="headerlink" title="总控进程"></a>总控进程</h2><table><thead><tr><th>功能</th><th>重要性</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>切片策略</td><td>top 0</td><td>描述一个视频该怎么切片，按帧切？还是按视频时长切？</td><td></td></tr><tr><td>算法编排</td><td>top 1</td><td>切片、音频提取、视频合并、音视合并等各个阶段编排在一起，整体流程</td><td></td></tr><tr><td>任务重试</td><td>top 0</td><td>理论上，该任务可以重试，重新触发计算，不影响结果</td><td></td></tr><tr><td>check bill</td><td>top 1</td><td>任务卡死、节点卡死时，如何触发继续流转下去？如何通知业务方？</td><td></td></tr></tbody></table><h2 id="task、event、segment、trace"><a href="#task、event、segment、trace" class="headerlink" title="task、event、segment、trace"></a>task、event、segment、trace</h2><table><thead><tr><th>名词</th><th>解释</th><th>关系</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>task</td><td>任务</td><td>一次请求，对应一笔任务</td><td>一笔切片请求，对应一笔任务</td><td>可使用UUID生成唯一的：task_id</td></tr><tr><td>event</td><td>事件</td><td>task 与event 是一对多的关系</td><td>一个dag节点，对应一个事件</td><td>event_id &#x3D; task_id + “_” + node_name</td></tr><tr><td>segment</td><td>片</td><td>event 与 segment 是一对多的关系</td><td>一个视频片，对应一个event</td><td>segment_id &#x3D; event_id + “_” + order</td></tr><tr><td>trace</td><td>跟踪</td><td>trace 与 event、segment 是一对多的关系</td><td>一次cpu、gpu计算，对应一次trace</td><td>可使用UUID生成唯一的：trace_id</td></tr></tbody></table><h2 id="音频剥离"><a href="#音频剥离" class="headerlink" title="音频剥离"></a>音频剥离</h2><p>依赖算法:libfdk_aac or aac，将音频从原始视频中剥离开来，例如：ffmpeg命令如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i source.mp4 -vn -y -acodec libfdk_aac -copyts output.aac -loglevel error</span><br></pre></td></tr></table></figure><p>为啥要音频提取并且重新转码？<br>1、一般算法处理，都是针对视频流，很少有针对音频流的，而处理慢，主要是处理视频慢，非处理音频慢，因此，将音频流提取出来，能够：减少视频处理过程的IO +<br>减少：cpu、gpu计算量。<br>2、用户输入的视频，格式千变万化，有些视频无法直接通过：-acodec<br>copy，直接将音频提取出来，会奇奇怪怪的错误。因此，统一将音频流转码，统一音频格式。另外，需：-copyts的PTS信息。<br>3、有些视频天然没有音频，因此，在处理前，需判断原始视频是否有音频，若有，再触发：音频提取流程，否则：直接触发视频切片。</p><h2 id="视频侦测：meta信息提取"><a href="#视频侦测：meta信息提取" class="headerlink" title="视频侦测：meta信息提取"></a>视频侦测：meta信息提取</h2><p>1、显示“流”的全局属性:</p><pre><code>- 显示的是流级信息，每个流（视频、音频、字幕等）只有一条记录。- 提供整体的技术参数，例如编解码器、分辨率、码率、帧率、采样率等。- 适用于快速查看媒体文件的基本属性和整体结构。</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffprobe -v quiet -print_format json -show_format -show_streams -loglevel error &#123;path&#125;</span><br></pre></td></tr></table></figure><p>2、显示“帧”的全局信息</p><pre><code>- 显示的是帧级信息，每一帧（视频帧、音频帧）都有详细记录。- 包含帧的时间戳（如 pts_time）、帧类型（I、P、B 帧）、时长、关键帧标识等详细数据。- 适用于需要分析视频细节（例如精确剪辑、帧检测等）时使用，因为它输出的数据量通常非常大。</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffprobe -select_streams v -show_frames -print_format json &#123;path&#125;</span><br></pre></td></tr></table></figure><p>1、以上两条命令中的：{path}可以是本地路径，也可以是url，如果视频必须要下载到本地，则使用本地路径，否则：更建议使用url。<br>2、以上两条命令是对输入视频进行画像，以便决策：它是否能够进行切片加速？以及相关的切片策略？</p><table><thead><tr><th>指标</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>码率</td><td>码率太低 or 码率太高，需要设置不同的码率策略</td><td>可行</td></tr><tr><td>帧率</td><td></td><td>可行</td></tr><tr><td>分辨率</td><td></td><td></td></tr><tr><td>负数帧</td><td></td><td></td></tr><tr><td>部分帧的pts都是一模一样的</td><td></td><td></td></tr></tbody></table><h2 id="视频切片"><a href="#视频切片" class="headerlink" title="视频切片"></a>视频切片</h2><table><thead><tr><th>功能</th><th>说明</th><th>是否可行</th><th>业界是否有</th></tr></thead><tbody><tr><td>按照gop关键帧切</td><td>输入视频时长，快速分割出一坨的视频文件</td><td>可行</td><td>有</td></tr><tr><td>按帧索引切</td><td>将原始视频的帧解封装，然后，使用libx264 or libx265重新压缩</td><td>可行</td><td>暂无</td></tr><tr><td>视频解码成图片</td><td>将原始视频里的帧解码成图片，然后，直接基于图片并行处理</td><td>暂不可行，图片太多，并发度太大，网络带宽扛不住</td><td>暂无</td></tr></tbody></table><p>当然了，视频如何切，需要考虑：底层算法，<br>1、有些算法，需要预留一些buffer帧进行预热，才能确保切片后的视频画质，能够不输于：不切片时的结果视频画质。<br>这种buffer帧策略，分为：前向重叠帧策略、后置重叠帧策略、双向重叠帧策略、无重叠帧。<br>2、有些算法，例如：消除某段视频里的某个物体，片与片之间存在上下文的相关性，此时，切片时，要将该物体所对应的帧序列，单独切出来，然后，合并到各个片上去，将所有片降维到：无关联性。<br>3、切片时，最好不要保留：PTS（后续基本用不上），也就是：切片时，将所有片的PTS都重置成0。<br>4、切片时，重叠的一些帧，在后续步骤中，需去除掉。</p><p>另外：1、按照视频时长切片，参考的ffmepg命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -c copy -map 0 -segment_time 10 -f segment output_%03d.mp4</span><br></pre></td></tr></table></figure><p>假设需要实现：重叠帧 or 预热帧的功能，则</p><p>2、使用cv2：pip install opencv-python ffmpeg-python 按照帧索引切：参考代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">def slice_and_combine_video(input_video_path, output_video_path, frame_start, frame_end):</span><br><span class="line">    video_capture = cv2.VideoCapture(input_video_path)</span><br><span class="line">    fps = int(video_capture.get(cv2.CAP_PROP_FPS))</span><br><span class="line">    width = int(video_capture.get(cv2.CAP_PROP_FRAME_WIDTH))</span><br><span class="line">    height = int(video_capture.get(cv2.CAP_PROP_FRAME_HEIGHT))</span><br><span class="line">    fourcc = cv2.VideoWriter_fourcc(*&quot;H264&quot;)</span><br><span class="line">    video_writer = cv2.VideoWriter(output_video_path, fourcc, fps, (width, height))</span><br><span class="line">    success, frame = video_capture.read()</span><br><span class="line">    count = 0</span><br><span class="line">    while success:</span><br><span class="line">        if count &gt;= frame_start and count &lt;= frame_end:</span><br><span class="line">            video_writer.write(frame)</span><br><span class="line">            </span><br><span class="line">        success, frame = video_capture.read()</span><br><span class="line">        count += 1</span><br><span class="line">    # 释放资源</span><br><span class="line">    video_capture.release()</span><br><span class="line">    video_writer.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    input_video_path = &quot;&quot;</span><br><span class="line">    output_video_path = &quot;&quot;</span><br><span class="line">    frame_start = 10</span><br><span class="line">    frame_end = 50</span><br><span class="line">    slice_and_combine_video(input_video_path, output_video_path, frame_start, frame_end)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="并行处理"><a href="#并行处理" class="headerlink" title="并行处理"></a>并行处理</h2><table><thead><tr><th>算法</th><th>片与片之间</th><th>是否支持切片</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>libx264</td><td>不相关</td><td>支持</td><td></td><td></td></tr><tr><td>libx265</td><td>不相关</td><td>支持</td><td></td><td></td></tr><tr><td>去水印</td><td>不相关</td><td>支持</td><td></td><td></td></tr><tr><td>去字幕</td><td>不相关</td><td>支持</td><td></td><td></td></tr><tr><td>去某个物体</td><td>有点相关</td><td>可降维到不相关，支持</td><td></td><td></td></tr><tr><td>文生图</td><td>强相关</td><td>调研突破中</td><td></td><td></td></tr><tr><td>文生视频</td><td>强相关</td><td>调研突破中</td><td></td><td></td></tr><tr><td>图生视频</td><td>弱相关</td><td>支持</td><td></td><td></td></tr></tbody></table><p>无论是哪种算法，都需要对输入视频进行解封装 + 重新编解码，因此，如果切片时有预留一些帧做buffer等操作，一般都在：并行处理中，去除这些buffer帧。<br>因此，底层算法，需要支持：remove_frames:[start_frames,end_frames]、[start_gop,end_gop]</p><h2 id="视频合并"><a href="#视频合并" class="headerlink" title="视频合并"></a>视频合并</h2><p>算法并行处理完毕后，能够得出一坨的算法处理后的视频片段，收集到这些片段后，将这些片段合并，即能得到一个完整的、处理后的视频。例如：参考ffmpeg命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f concat -safe 0 -i &#123;0&#125; -i &#123;1&#125; -c copy -output_ts_offset &#123;2&#125; -movflags faststart &#123;3&#125; -loglevel error</span><br></pre></td></tr></table></figure><p>注意：输入的各个片段的PTS，已重置过 + 算法重新编解码过，因此，需要在这边做：视频PTS对齐操作。否则，极容易导致：音画不同步的问题。</p><h2 id="音视合并"><a href="#音视合并" class="headerlink" title="音视合并"></a>音视合并</h2><p>最后一步，将音频流 + 视频流合并，使用如下：ffmepg命令，即可正常合并。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i &#123;0&#125; -i &#123;1&#125; -copypts -c:v copy -c:a copy -map_metadata 0 -strict experimental -movflags faststart &#123;2&#125; -loglevel error</span><br></pre></td></tr></table></figure><h2 id="算法编排"><a href="#算法编排" class="headerlink" title="算法编排"></a>算法编排</h2><p>如本文中<a href="#%E5%88%87%E7%89%87%E5%8A%A0%E9%80%9F">切片加速</a><br>图片所示：整个过程，可以硬编代码写死，也可以使用dag引擎来编排，详细内容，可参考章节：<a href="/posts/394f6975.html">任务编排</a><br>，这里不再赘述。</p><h2 id="资源调度"><a href="#资源调度" class="headerlink" title="资源调度"></a>资源调度</h2><p>包括：多云调度、cpu集群与gpu集群协调、自动扩缩容等等，这些将在章节：<a href="/posts/8e26567b.html">资源调度</a>，重点描述，这里不再赘述。</p><h2 id="cb体系"><a href="#cb体系" class="headerlink" title="cb体系"></a>cb体系</h2><p>如本文中<a href="#%E5%88%87%E7%89%87%E5%8A%A0%E9%80%9F">切片加速</a> 包括的图片所示，由于中间各个步骤，包括了大量的：cpu or<br>gpu计算服务，比较容易导致：算法奔溃，卡死，导致总控进程长时间未收到回调，因此，需要总控进程触发check 任务状态，假设超过一定的时间阈值，重试<br>or 设置整个任务为失败。</p><h2 id="监控指标"><a href="#监控指标" class="headerlink" title="监控指标"></a>监控指标</h2><h3 id="压缩比"><a href="#压缩比" class="headerlink" title="压缩比"></a>压缩比</h3><p>压缩比 &#x3D; 输出视频文件大小 &#x2F; 输入视频的文件大小</p><h1 id="成本"><a href="#成本" class="headerlink" title="成本"></a>成本</h1><h2 id="小文件存储成本"><a href="#小文件存储成本" class="headerlink" title="小文件存储成本"></a>小文件存储成本</h2><table><thead><tr><th>类别</th><th>说明</th><th>存储规格</th><th>生命周期</th><th>备注</th></tr></thead><tbody><tr><td>原视频</td><td>存放在桶1</td><td>推荐：3天内，标准存储，超出：自动降档</td><td>按照业务场景定，例如：3天内，自动归档</td><td></td></tr><tr><td>结果视频</td><td>存放在桶2</td><td>推荐：21天内，标准存储，超出：自动清理</td><td>按照业务场景定,例如：21天，标准存储，之后自动清理</td><td></td></tr><tr><td>中间片段</td><td>存放在桶3</td><td>单副本即可</td><td>按照业务场景定，建议1天后，自动清理</td><td></td></tr></tbody></table><p>备注：<br>1、强烈建议：原始视频 + 结果视频 + 中间片段，存放在3个桶里，或者：至少3个文件夹里，单独根据业务场景设置生命周期规则，例如：小文件存储提供的特性，自动清理<br>2、上述：推荐的存储规格，只是一种建议。真实落地时，得根据实际项目的运行情况来。</p><h2 id="性能与成本均衡"><a href="#性能与成本均衡" class="headerlink" title="性能与成本均衡"></a>性能与成本均衡</h2><p>经过实测，切片能够加速，能够加速：处理时长&#x2F;视频时长 ≈ 0.5左右，但是，切片成本 &#x2F; 不切片成本 &#x3D; 1.1，视不同算法而定。<br>因此，是否所有视频都开启切片？答案：否定的，得根据实际情况来定，例如：超过1min的视频，才开启切片加速。</p><p>另外，cpu集群与gpu集群，可以考虑混部，</p><p>存储集群 + 计算集群，可以考虑：单元化部署，当然了，还是遵守：存算一体原则。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="图片处理是否需要切片并行？"><a href="#图片处理是否需要切片并行？" class="headerlink" title="图片处理是否需要切片并行？"></a>图片处理是否需要切片并行？</h2><p>图片处理，一般比较快，如果遇到慢的问题，可通过：扩容资源的方式来处理，暂时无法进行：切片并行的策略。</p><p>当然了，图片分块后，块与块之间，都有相关性，暂时无法做到：并行化。</p><h2 id="色偏"><a href="#色偏" class="headerlink" title="色偏"></a>色偏</h2><p>切片与并行算法处理，均需要考虑：色偏问题，重点是：做好色域映射。</p><h2 id="音轨、视轨无法对齐"><a href="#音轨、视轨无法对齐" class="headerlink" title="音轨、视轨无法对齐"></a>音轨、视轨无法对齐</h2><p>视频PTS对齐 + 音频PTS对齐</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 媒体处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> parallel、speed up、slice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法工程化</title>
      <link href="/posts/9489c3a6.html"/>
      <url>/posts/9489c3a6.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>将相关算法部署，并提供一个 or 多个http接口，服务于业务方。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>大学中所学的数据结构课本上说：算法是指解决问题或执行任务的有序步骤集合。当然，如此描述的算法，相当准确。但是，对于实际工程落地而言，还是过于：抽象。<br>这里面描述的算法，是指：算法同学所交付的可执行文件 or<br>so库，例如：视频压缩领域的：264算法，交付的产品：集成到ffmepg中的libx264。例如：如下命令，是使用：libx264算法真正去压缩一个视频的命令，那么：对于实际工程落地而言，所提供的带上libx264的ffmpeg可执行程序，可以简单地理解成：算法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i source.mov -s 1280x720 -profile:v high444 -c:v libx264 -preset veryslow -crf 30 -r 30 -g 120 -keyint_min 30 -sc_threshold 40 -bf 3 -b_strategy 2 -refs 5 -c:a libfdk_aac -profile:a aac_low -b:a 128k -movflags faststart -max_muxing_queue_size 9999 -f mp4 -loglevel error 720_3.mp4 -y</span><br></pre></td></tr></table></figure><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>在计算机科学和机器学习领域，模型是对现实世界问题或系统的一种简化或抽象。如此描述模型，如同算法一样，相当准确，可惜：对于实际工程落地而言，还是：过于：抽象 +<br>空。因此，站在实际工程落地而言，所谓模型：其实是指：模型技术人员，已经训练好的，可以提供部署的文件zip包。</p><h2 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h2><p>基于此，所谓算法工程化，就是：将算法技术人员，交付过来的东西（可执行文件 or so库 or zip包 or docker镜像等等），在cpu机器<br>or gpu机器部署起来，提供一个http接口，服务于业务。</p><h1 id="需求提炼"><a href="#需求提炼" class="headerlink" title="需求提炼"></a>需求提炼</h1><p>在实际项目中，算法、模型要能标准化部署起来，并服务于实际业务，应该满足以下条件：</p><p>1、标准化部署<br>算法、模型，的入参、出参，千变万化，但是，期望在部署它们时，能够有一个标准化姿势，以减轻算法、模型的部署成本。</p><p>2、成本最低<br>部署在cpu or gpu上时，期望所花费的成本最低。<br>a、能够以最快的速度加载模型，避免成本的浪费<br>b、当流量低时，能够自动回收闲置的CPU、GPU资源<br>c、多个模型，流量切换时，能够自动释放资源，自动扩容资源</p><p>3、调参<br>算法、模型部署好后，期望能够快速知道它的处理效果如何，输入一批预先设定好的图片、视频 + 相关参数，能够快速得到结果，并且及时反馈：当前算法、模型是否ok</p><p>4、版本迭代<br>算法、模型版本迭代时，能够快速训练，出结果，验证通过后，能够快速发布</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>对于图片、视频而言，业务方传送过来的一般是：各种各样的url地址，如何基于这些url地址，以快速且以最低的成本下载到本地磁盘？<br>1、分片下载？form表单下载？<br>2、公网域名如何转为内网域名下载？公网域名所带来的cdn成本很贵，而一般内网域名下载，不需要钱。<br>3、有些算法，并不需要下载整个视频 or 整个图片，下载一段视频即可触发cpu计算，获取结果，例如：计算视频的meta信息<br>4、有些url有鉴权参数 + 有限期限制，如何将过期的url，重新算成有效？<br>5、多云部署，单元化下载，能够节省非常多的成本</p><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>经过算法、模型的计算后，一般会产生：新的图片s or 视频s，如何将结果，快速切最低成本上传到小文件存储系统里（例如：阿里云的oss）<br>1、分片上传？form表单上传？<br>2、多云自动切换？<br>3、如何自动产生不冲突的文件名称？</p><h2 id="工作目录"><a href="#工作目录" class="headerlink" title="工作目录"></a>工作目录</h2><p>1、待触发计算的文件，最好防在本地磁盘里，不太建议使用：云盘等涉及到网络IO的解决方案。<br>2、算法、模型在计算过程中，很大大概率会产生一些中间文件，因此，需要一个本地临时目录来存储。</p><h2 id="基础镜像"><a href="#基础镜像" class="headerlink" title="基础镜像"></a>基础镜像</h2><h2 id="镜像如何分发"><a href="#镜像如何分发" class="headerlink" title="镜像如何分发"></a>镜像如何分发</h2><p>有些算法、模型执行，依赖的服务镜像非常大，集群分发时，部署有点慢，如何预热加速？</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>当业务方反馈问题，如何快速找到算法、模型的入参 + 出参？协助相关技术人员分析问题。</p><h2 id="更新迭代"><a href="#更新迭代" class="headerlink" title="更新迭代"></a>更新迭代</h2><p>分析并解决完问题后，如何快速部署新的版本到线上，需设计一套更新迭代机制，快速服务于业务方？</p><h2 id="多版本管理"><a href="#多版本管理" class="headerlink" title="多版本管理"></a>多版本管理</h2><p>线上部署的函数，最好有多版本，方便快速回滚到旧。</p><h1 id="业界方案"><a href="#业界方案" class="headerlink" title="业界方案"></a>业界方案</h1><p>faas：提出一个抽象的概念：function as a service，通过函数，对算法、模型，再次封装，并提供http服务，为业务方服务。<br>当然了，也可以提以下新的概念<br>1、aaas，算法 as a service<br>2、maas：模型 as a service，<br>3、FMaaS：基础模型即服务，</p><p>无论叫啥名字，它们的核心本质是一样的。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>整体系统架构图如下：<br><img src="/images/fn_flow_1.png"></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>通过函数的概念，对算法、模型，再次封装，支持的接入形态：shell、python、so库等</p><h2 id="报文设计"><a href="#报文设计" class="headerlink" title="报文设计"></a>报文设计</h2><p>算法、模型，只处理本地文件，并产出结果到本地文件中，因此，需要做以下2件事情：<br>1、需要为：算法、模型发起计算时创建好：本地执行的环境。<br>2、参数、结果灵活传递。<br>如下图所示：<br><img src="/images/msg_model_1.png"></p><h3 id="业务报文设计"><a href="#业务报文设计" class="headerlink" title="业务报文设计"></a>业务报文设计</h3><p>1、请求报文</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;create_time&quot;</span><span class="punctuation">:</span> <span class="number">111112232</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;19dc3271b5054216a939eb8f029e748c&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;notify_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;priority&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;input_files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cloud&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bucket&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pre_download&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;output_files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;cloud&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bucket&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;flows&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;fn_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fn_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fn_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extra&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>2、响应报文</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;error_code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;error_msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>3、回调报文</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;msg_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;output_files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;cmd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bucket&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extra&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;file_size&quot;</span><span class="punctuation">:</span> <span class="number">1111</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jpg or png&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="函数交互报文"><a href="#函数交互报文" class="headerlink" title="函数交互报文"></a>函数交互报文</h3><p>1、函数入参报文</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;work_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/tmp/a59461fac43dc435a916d338c021177cb/&#123;fn_name&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;input_files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;video&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;local_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./a.mp4&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remote_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pre_download&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;arg_map&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;aformat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;aac&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vformat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mp4&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>备注：<br>a、如果pre_download为false，则local_path为空，remote_url有值，函数基于remote_url进行处理。<br>b、如果pre_download为true，则local_path一定不为空，宿主程序会帮忙下载图片，函数基于：local_path进行处理即可<br>c、函数里面的代码逻辑，可处理：pre_download，也可不处理，按照一定的规则即可。</p><p>2、函数出参报文</p><p>成功：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;error_code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;error_msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;success&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;output_files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;video&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;form&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LocalPath&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/tmp/a59461fac43dc435a916d338c021177cb/avsate_a.mp4&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;audio&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;form&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LocalPath&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/tmp/a59461fac43dc435a916d338c021177cb/avsete_a.aac&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;arg_map&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>失败：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;error_code&quot;</span><span class="punctuation">:</span> <span class="number">3002</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;error_msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Run ffmpeg errors! ffmpeg error info: xxx&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="MQ代理消费"><a href="#MQ代理消费" class="headerlink" title="MQ代理消费"></a>MQ代理消费</h2><p>不建议处理进程直接对接MQ，特别是：kafka时，强烈建议：增加一层：MQ代理消费进程，具体如下图所示：<br><img src="/images/msg_consume_proxy.png"><br>具体原因：<br>1、因为处理进程，都是cpu or gpu密集型业务，cpu跑100%是很正常的事情，如果此时，处理进程直怼kafka，容易导致：kafka认为消费进程卡死，触发partition一直reblance。<br>2、处理进程尽量轻量，若：集成了kafka的SDK，会变的有点重，还不如：使用标准的http协议。</p><h2 id="并发度"><a href="#并发度" class="headerlink" title="并发度"></a>并发度</h2><p>触发器：可以同时消费1个 or 2个以上的消息，因此，需要实现精准度控制并发消费。举个例子：</p><table><thead><tr><th>功能</th><th>并发度</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>图片处理</td><td>2个以上</td><td>图片处理，一般不太费cpu，完全可以提高cpu利用率</td><td></td></tr><tr><td>视频拼接</td><td>2个以上</td><td>部分场景的视频拼接，仅仅只需要解封装，不怎么费cpu，但是，费：io</td><td></td></tr><tr><td>视频编解码</td><td>1个</td><td>非常费cpu，因此，一个pod只能处理一笔业务</td><td></td></tr><tr><td>视频编解码</td><td>1个</td><td>非常费cpu，因此，一个pod只能处理一笔业务</td><td></td></tr></tbody></table><p>备注：<br>1、并发度的评判标准，可以是：cpu的利用率 + 业务场景（例如：是否是付费用户）等等具体的指标。</p><h2 id="多进程通讯"><a href="#多进程通讯" class="headerlink" title="多进程通讯"></a>多进程通讯</h2><p>如:<a href="#%E5%B7%A5%E7%A8%8B%E5%8C%96">工程化</a>所述，交付到工程团队的形态，一般都是：二进制可执行文件 or so库 or<br>快速开始的代码块等，而整套体系要跑起来，都会涉及：多进程通讯，一般有以下三种进程：</p><table><thead><tr><th>进程</th><th>是否存在</th><th>负责团队</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>处理进程</td><td>是</td><td>工程团队</td><td>1、消费报文<br/>，2、下载文件，创建函数执行的环境信息<br/> 3、调用函数<br>4、收集结果<br/>5、清理环境信息</td><td></td></tr><tr><td>函数进程</td><td>是</td><td>工程团队 + 算法、模型团队一起</td><td>一般是：shell、python、go等代码包</td><td></td></tr><tr><td>算法进程</td><td>否</td><td>算法、模型团队 or 业界开源的算法、模型</td><td>如果算法同学提供的是：so库，则不一定存在算法进程</td><td></td></tr></tbody></table><h3 id="入参、出参"><a href="#入参、出参" class="headerlink" title="入参、出参"></a>入参、出参</h3><table><thead><tr><th>方式</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>管道</td><td>通过std in传入入参信息，再通过stdout，传出结果信息</td><td></td></tr><tr><td>文件</td><td>子进程将处理结果写入文件，再通过stdout透传文件地址信息，父进程根据文件地址读取结果信息</td><td></td></tr></tbody></table><h3 id="父子进程状态控制"><a href="#父子进程状态控制" class="headerlink" title="父子进程状态控制"></a>父子进程状态控制</h3><table><thead><tr><th>状态</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>优雅关闭</td><td>当父进程收到重启等信息号，停止消费，等待：子进程执行完毕后，正常退出</td><td></td></tr><tr><td>主动强制退出</td><td>当父进程收到强制退出信息号， 直接kill -9，强制子进程，异常退出</td><td></td></tr><tr><td>被动退出</td><td>当子进程卡死后，父进程超时退出时，kill -9 触发子进程强制，异常退出</td><td></td></tr></tbody></table><h2 id="pipeline机制"><a href="#pipeline机制" class="headerlink" title="pipeline机制"></a>pipeline机制</h2><p>1、站在业务的视角，函数的功能，一般都比较原子化，而复杂的业务功能，常常需要多个函数串联执行，例如：想要获取某张图片缩略后的宽高信息。<br>2、站在技术的视角，复杂的业务，是个dag流程，而不同节点执行，若在不同的公有云（或者物理机）上，常常涉及到：多次下载同一个文件，浪费：内网带宽<br>甚至是公网带宽。如何优化处理耗时 or 节省公网带宽成本？就需要尽量让：数据不动，让业务配置动起来。</p><p>基于2点，就需要让处理进程通过类似：pipelie的方式，执行某个业务。</p><h2 id="算法镜像"><a href="#算法镜像" class="headerlink" title="算法镜像"></a>算法镜像</h2><p>尽量做到：每个函数所依赖的算法，是独立的，自包含的，不太建议：依赖于基础镜像，不然，后续维护成本比较高。</p>]]></content>
      
      
      <categories>
          
          <category> 媒体处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm engineering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0到1搭建媒体处理体系</title>
      <link href="/posts/87af4ad.html"/>
      <url>/posts/87af4ad.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>作为公有云重要组成部分，云端媒体处理体系，可以通过将图片、视频、音频等的计算处理移至云端，让用户享受到更高效、灵活、可扩展的服务。</p><h2 id="业界调研"><a href="#业界调研" class="headerlink" title="业界调研"></a>业界调研</h2><table><thead><tr><th>公有云</th><th>缩写</th><th>产品名称</th><th>备注</th></tr></thead><tbody><tr><td>阿里云</td><td>MPS</td><td>媒体处理、媒资库</td><td></td></tr><tr><td>腾讯云</td><td>MPS</td><td>媒体处理</td><td></td></tr><tr><td>百度云</td><td>MMS</td><td>多模态媒资检索</td><td></td></tr><tr><td>火山引擎</td><td></td><td>媒资库、视频库</td><td></td></tr><tr><td>华为云</td><td>MPC</td><td>媒体处理</td><td></td></tr><tr><td>七牛云</td><td></td><td>智能多媒体服务</td><td></td></tr><tr><td>又拍云</td><td></td><td>云处理</td><td></td></tr></tbody></table><p>其实，无论叫啥名字，它们的本质做的事情是一样的。其整体流程图如下：<br><img src="/images/mcp_step_1.png"></p><h1 id="怎么搭建"><a href="#怎么搭建" class="headerlink" title="怎么搭建"></a>怎么搭建</h1><p>经过抽象，想要搭建一套媒体处理，包括以下模块，如下图所示：<br><img src="/images/cps_4.png"></p><p>说明：<br>1、上述图展示的是：包括了多少个功能模块，并非调用顺序，各个模块的调用顺序，得根据实际功能来定，会有专门的模块来分析。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>云处理的功能，用公式来表达：媒体s &#x3D; fn (媒体s，参数)，有以下特点：<br>1、媒体，只是狭义上的媒体，单纯地指：图片 + 视频 + 音频。<br>2、带上s，证明可以是：多个，也可以是0个，入参 + 出参均是如此。<br>3、fn：函数，特指：对入参媒体s做的动作。<br>4、出参：媒体s，可以是文本，例如：包括了meta的json文本、xml文本 或者：其他格式的载体。</p><p>举些例子：<br>例子1：视频截帧，入参是：一个视频，出参：一坨的图片，fn：截帧。<br>例子2：视频加logo水印：入参：1个视频 + 1张logo图片 + 一些文字，出参：一个视频，fn：拼接。<br>例子3：图片meta信息，入参：一张图片，出参：文本：json串，fn：计算。<br>例子4：文生图：入参：文本，出参：图片，fn：模型计算。<br>例如5：文生视频：入参：文本，出参：视频，fn：模型计算。</p><h2 id="网关域-or-开放平台"><a href="#网关域-or-开放平台" class="headerlink" title="网关域 or 开放平台"></a>网关域 or 开放平台</h2><p>需一套api平台，将所研发的图片、视频处理能力对外开放，此模块，简称：api开放平台，具体详见：<a href="/posts/713ae57e.html">开放平台</a></p><h2 id="状态域"><a href="#状态域" class="headerlink" title="状态域"></a>状态域</h2><p>对于运营 or 产品 or 技术等各方角色，都需要有一后台系统管理，它能够查询到：用户在什么时间，在什么样的设备上，用了哪些图片 or<br>视频，输入了啥参数，做了啥动作，最终输出了什么样的结果？这套系统包括以下功能：</p><table><thead><tr><th>功能</th><th>优先级</th><th>功能说明</th><th>备注</th></tr></thead><tbody><tr><td>meta信息</td><td>T0</td><td>1、记录图片：宽、高、文件大小、色域等meta信息 <br> 2、记录视频的宽、高、文件大小、视频时长、音频时长等meta信息</td><td>刚需，业务侧经常使用，对获取meta信息的接口性能也有要求。建议：缓存到redis or mysql or local cache等地方</td></tr><tr><td>索引信息</td><td>T0</td><td>记录图片、视频的处理前后的索引信息。包括：输入媒体是哪些？经过了哪些处理？输出媒体有哪些？方便运营侧分析运营数据</td><td></td></tr><tr><td>优化计算</td><td>T1</td><td>详见：<a href="#%E4%BC%98%E5%8C%96%E8%AE%A1%E7%AE%97">优化计算</a></td><td></td></tr><tr><td>碎片</td><td>T1</td><td>详见：<a href="#%E7%A2%8E%E7%89%87">碎片</a></td><td></td></tr><tr><td>cdn成本</td><td>T0</td><td>详见：<a href="#cdn%E6%88%90%E6%9C%AC">cdn成本</a></td><td></td></tr><tr><td>播放体验</td><td>T0</td><td>详见：<a href="#%E6%92%AD%E6%94%BE%E4%BD%93%E9%AA%8C">播放体验</a></td><td></td></tr></tbody></table><h3 id="优化计算"><a href="#优化计算" class="headerlink" title="优化计算"></a>优化计算</h3><p>正如前文所说的云处理：媒体s &#x3D; fn (媒体s，参数)，它有一特点：只要媒体s + 参数 +<br>fn + 计算资源是固定的，无论何时，再次发起计算，对于用户而言，它的结果都应该是一样的。假设不一样，则对于用户而言，属于bug。因此，可以利用这一点，缓存一段时间的计算结果<br>相关流程如下：<br><img src="/images/optimize_cal_1.png"><br>说明：<br>1、好处：一方面：能够加速处理速度，提升用户体验，另外一方面：能够节约cpu or gpu计算成本。<br>2、将结果缓存起来，可以选择：关系型数据库：mysql 或者：非关系型数据库：redis，根据实际情况来定。</p><h3 id="碎片"><a href="#碎片" class="headerlink" title="碎片"></a>碎片</h3><p>所谓碎片，顾名思义：业务系统因某种原因，未能及时追踪到的文件。日积月累后，该部分成本相关可观。如下图所示：<br><img src="/images/file_piece.png"><br>碎片产生的原因，一般有以下几种：<br>1、业务操作不当，导致引用的内容被删除后，相对应的文件，没有正常删除。实践下来：小头。<br>2、小文件存储系统都有分片上传功能，当分片上传完成后，一般只有一个结果文件存在。因此，中间过程文件需要及时清理掉。实践下来：大头。<br>3、切片加速，所产生的中间结果文件。实践下来：大头<br>4、加水印过程中，有可能会产生水印图片这样的中间文件。实践下来：小头。<br>5、桶中不完整的数据也称之为碎片，例如：采用了分片上传后，因各种各样异常情况，导致文件上传失败，而桶中不完全的碎片数据，也会产生成本。实践下来，看情况。</p><p>如何检测是否有碎片文件产生？<br>1、业务侧通过记录：业务期许的媒体文件信息大小 跟小文件存储系统做一个对比，能够大致知道：是否有碎片的产生。<br>2、梳理业务的全过程。</p><p>如何处理？</p><p>灵活地使用小文件存储系统提供的对象生命周期管理，优化碎片。例如：文件夹拆分 + 桶拆分，并配置对象生命周期规则。</p><h3 id="cdn成本"><a href="#cdn成本" class="headerlink" title="cdn成本"></a>cdn成本</h3><p>对于一个短视频社区而言，相关成本(不谈人力成本)占比：cdn成本 &gt;&gt; 转码成本 &gt;&gt; 服务器成本 &gt;&gt; 小文件存储系统的成本。其中，<br>据字节跳动、快手等社区公开的相关资料来看：转码的cpu成本 &#x3D; cdn成本 * 10%，因此，优化cdn非常重要，常见的cdn成本优化策略如下：</p><table><thead><tr><th>策略</th><th>功能说明</th><th>备注</th></tr></thead><tbody><tr><td>缓存策略优化</td><td>合理配置缓存规则，确保只有必要的内容被缓存，并设置适当的缓存时长。对于静态内容，可以使用较长的缓存时间，而对于动态内容，可以使用较短的缓存时间或者禁用缓存</td><td></td></tr><tr><td>编解码压缩算法</td><td>深入研究：264、265、266等压缩算法，提高视频、图片的压缩效率</td><td></td></tr><tr><td>内容分级</td><td>将网站内容分级，对于核心业务内容使用高性能的CDN节点，而对于次要内容使用成本更低的节点，更精细地控制成本</td><td></td></tr><tr><td>合理选择CDN</td><td>定期评估网站的流量和各家CDN套餐情况，根据实际需求调整配置</td><td></td></tr></tbody></table><p>备注：<br>1、当然了，像播放量不高的短视频社区（例如：转码成本跟cdn成本相当），此时，再去研究编解码压缩算法，就意义不太大了，甚至引入：公有云的265算法，意义也不大。</p><h3 id="媒体分发"><a href="#媒体分发" class="headerlink" title="媒体分发"></a>媒体分发</h3><p>以下是某个社区的视频分发流程：</p><p><img src="/images/media_dispatch_1.png"></p><p>备注：<br>1、在图中未显示出来：多码率自适应流：提供多个不同比特率的视频流，以便根据用户的网络速度和设备性能自动选择最佳的视频质量，以保持流畅的播放。</p><h2 id="编排域"><a href="#编排域" class="headerlink" title="编排域"></a>编排域</h2><p>详见：<a href="/posts/394f6975.html">任务编排</a></p><h2 id="画质管理"><a href="#画质管理" class="headerlink" title="画质管理"></a>画质管理</h2><p>如何才能决策：一个算法 or 模型具备上线的资格呢？或者说：如何评价一个算法 or 模型计算后的图片、视频的效果呢？参考流程如下：<br><img src="/images/media_quality_mng.png"></p><p>备注：<br>1、画质评测，业界标准分为：主观评测 + 客观评测，但是，据了解，客观评测目前更多的还是为：以节约人力为目标，为主观评测服务的，最终决定权：还在人身上。<br>2、多策略跑图、跑视频，最终让人去决策：某一个版本是否可以上线：也挺费算力资源 + 人力资源。</p><h2 id="多云元数据服务"><a href="#多云元数据服务" class="headerlink" title="多云元数据服务"></a>多云元数据服务</h2><p>详见：<a href="/posts/87696e09.html">多云元数据服务</a></p><h2 id="仿真中心"><a href="#仿真中心" class="headerlink" title="仿真中心"></a>仿真中心</h2><p>ToDo 待补充</p><h2 id="视频切片加速"><a href="#视频切片加速" class="headerlink" title="视频切片加速"></a>视频切片加速</h2><p>详见：<a href="/posts/4d3edad6.html">视频切片加速</a></p><h2 id="计算域"><a href="#计算域" class="headerlink" title="计算域"></a>计算域</h2><p>强烈建议：存算一体</p><h3 id="算法工程化"><a href="#算法工程化" class="headerlink" title="算法工程化"></a>算法工程化</h3><p>详见：<a href="/posts/9489c3a6.html">算法工程化</a></p><h3 id="资源调度"><a href="#资源调度" class="headerlink" title="资源调度"></a>资源调度</h3><p>详见：<a href="/posts/8e26567b.html">资源调度</a></p><h3 id="算法编排"><a href="#算法编排" class="headerlink" title="算法编排"></a>算法编排</h3><p>详见：<a href="/posts/394f6975.html">任务编排</a></p><h2 id="存储域"><a href="#存储域" class="headerlink" title="存储域"></a>存储域</h2><p>本文不探讨：如何落地小文件存储体系？这也是一个相当复杂的体系，仅探讨：基于媒体处理体系的背景下，如何使用业界的小文件存储系统？</p><h3 id="业界调研-1"><a href="#业界调研-1" class="headerlink" title="业界调研"></a>业界调研</h3><table><thead><tr><th>业界产品</th><th>所属云</th><th>说明</th><th>单价（目录价）</th><th>备注</th></tr></thead><tbody><tr><td>OBS</td><td>华为云</td><td></td><td>0.099元&#x2F;GB&#x2F;月</td><td></td></tr><tr><td>OSS</td><td>阿里云</td><td></td><td>0.12元&#x2F;GB&#x2F;月</td><td></td></tr><tr><td>TOS</td><td>字节跳动</td><td></td><td>0.15元&#x2F;GiB&#x2F;月</td><td></td></tr></tbody></table><p>备注：<br>1、以上价格都是从官网上收集的目录价，非：商务谈判的价格。<br>2、不少云：上传免费，存储：月均价格比较低（大客户，单价更低），但是：下载（播放）：带宽很贵，触发cpu计算，贵。</p><h3 id="上传方式"><a href="#上传方式" class="headerlink" title="上传方式"></a>上传方式</h3><p>内网产生的流入和流出流量均免费，但是请求次数仍会计费。</p><p>大文件上传：分片上传，</p><h3 id="下载方式"><a href="#下载方式" class="headerlink" title="下载方式"></a>下载方式</h3><p>大文件下载：分片下载，</p><h3 id="s3协议"><a href="#s3协议" class="headerlink" title="s3协议"></a>s3协议</h3><h3 id="转存"><a href="#转存" class="headerlink" title="转存"></a>转存</h3><p>1、直接使用所属云的sdk，直接触发对象copy<br>2、先下载，后上传，类似：七牛云的fetch接口</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>1、不建议：在业务系统中直接调用sdk删除对象，而是：事先规划好“文件夹”，通过生命周期规则来处理。<br>2、</p><h3 id="存储类型"><a href="#存储类型" class="headerlink" title="存储类型"></a>存储类型</h3>]]></content>
      
      
      <categories>
          
          <category> 媒体处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MPS、总纲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>版本核对</title>
      <link href="/posts/5359361b.html"/>
      <url>/posts/5359361b.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在实际媒体计算的业务场景中，如何确定计算后的图片 or 音频 or<br>视频符合上线标准？最简单的办法：手动跑图，然后，人眼看，主观判断是否符合上线标准。这种方法，随着核对算法越来越多，跑图张数越来越多以后，会变得越来越吃力。</p><h2 id="核对流程"><a href="#核对流程" class="headerlink" title="核对流程"></a>核对流程</h2><p>对于用户而言，其整体工作流程如下：</p><p><img src="/images/check_step_1.png"></p><h1 id="概念定义"><a href="#概念定义" class="headerlink" title="概念定义"></a>概念定义</h1><p>1、版本核对，以某个版本的算法的跑图结果作为基准，新开发的算法的跑图结果 与 此基准跑图，做差异性检测。如果有差异，则人工介入分析。</p><p>其中，两个版本的算法，跑图必须一样 + 算法入参也必须一样，注意：必须2种结果：以其中一个为基准，确定另一个是否满足预期。</p><p>2、版本择优：同一个算法，入参图片一样，但是，算法入参不一样，计算出多种结果，然后，主观选择最好的一种上线。注意：2种以上的结果。</p><p>3、画质评测：同一个算法、入参图片一样，算出一种结果，通过人眼主观评测，得出当前结果的画质值，注意：可以只有一种结果。</p><p>4、自主跑图：自动调用手机 or 电脑 or api,自动跑出一批图片 or 视频出来。</p><p><img src="/images/check_about_1.png"></p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>按照跑图媒介进行分类：</p><table><thead><tr><th>名称</th><th>分类</th><th>说明</th><th>备  注</th></tr></thead><tbody><tr><td>安卓跑图</td><td>手机客户端跑图</td><td>调度安卓机器，触发跑图</td><td></td></tr><tr><td>ios跑图</td><td>手机客户端跑图</td><td>调度ios机器，触发跑图</td><td></td></tr><tr><td>mac跑图</td><td>PC客户端跑图</td><td>调度mac机器，触发跑图</td><td></td></tr><tr><td>windows跑图</td><td>pc客户端跑图</td><td>调度windows机器，触发跑图</td><td></td></tr><tr><td>api跑图</td><td>服务端跑图</td><td>直接调用api触发服务端跑图</td><td></td></tr></tbody></table><p>算法，可跑在客户端上，也可跑在服务端上，也可客户端 + 服务端相互配合。基于此：核对算法的分类，也可分为：</p><table><thead><tr><th>分类</th><th>说明</th><th>备 注</th></tr></thead><tbody><tr><td>UI跑图</td><td>模拟用户行为，触发跑图</td><td>客户端跑图，当然，也有可能服务端也参与其中一步</td></tr><tr><td>机器人跑图</td><td>屏蔽掉UI影响，获取算法入参，触发客户端跑图</td><td>客户端跑图,当然，也有可能服务端也参与其中一步</td></tr><tr><td>api跑图</td><td>摈弃客户端，直接触发服务端跑图</td><td>只有跑在服务端的算法才有，当然，也有可能服务端也参与其中一步</td></tr></tbody></table><p>备注：<br>1、UI的本质：方便用户灵活、快速构建：算法、模型的入参。<br>2、有些算法是跑在客户端上，有些算法是跑在服务端上，有些算法是：客户端+服务端配合起来一起处理的。</p><p>从输出对象的类型分类：</p><table><thead><tr><th>分类</th><th>说明</th><th>评分指标</th><th>备 注</th></tr></thead><tbody><tr><td>图片核对</td><td>找出两个图片的差异度</td><td>是否有差异</td><td>需落地：差异度检测算法</td></tr><tr><td>视频核对</td><td>找出两个视频的差异度</td><td>是否有差异</td><td>需落地：差异度检测算法</td></tr><tr><td>图片画质评测</td><td>从清晰度、亮度、色彩、噪点等指标，分别对不同的图片进行评分</td><td>三分制 or 五分制</td><td></td></tr><tr><td>视频画质评测</td><td>从清晰度、亮度、色彩、噪点等指标，分别对不同的视频进行打分</td><td>三分制 or 五分制</td><td>可通过计算：psnr、ssim、vmaf指标，协助打分</td></tr><tr><td>图片择优</td><td>同一个输入，不同的算法入参，选择最好的输出图片</td><td>选出最好的</td><td>可通过计算：psnr、ssim、vmaf指标，协助择优</td></tr><tr><td>视频择优</td><td>同一个输入，不同的算法入参，选择最好的输出视频</td><td>选出最好的</td><td>可通过计算：psnr、ssim、vmaf指标，协助择优</td></tr></tbody></table><p>从跑图时机上分类：</p><table><thead><tr><th>分类</th><th>说明</th><th>备 注</th></tr></thead><tbody><tr><td>立即跑图</td><td>人工触发，只要有机器，立马跑图</td><td></td></tr><tr><td>延时跑图</td><td>人工触发，非紧急任务，可延迟到：凌晨跑</td><td></td></tr><tr><td>定时跑图</td><td>定时触发，每周六早上10点跑图</td><td></td></tr></tbody></table><h2 id="自主跑图"><a href="#自主跑图" class="headerlink" title="自主跑图"></a>自主跑图</h2><h2 id="结果比对"><a href="#结果比对" class="headerlink" title="结果比对"></a>结果比对</h2><h2 id="差异度检测"><a href="#差异度检测" class="headerlink" title="差异度检测"></a>差异度检测</h2><p>差异度检测是版本核对中的关键环节，主要包含以下几个方面：</p><ol><li>像素级别比对</li></ol><ul><li>逐像素比较两个版本的输出结果</li><li>计算像素差异率和差异分布</li><li>设定差异阈值，判定是否需要人工介入</li></ul><ol start="2"><li>特征级别比对</li></ol><ul><li>提取图像关键特征（边缘、纹理等）</li><li>比较特征向量的差异程度</li><li>评估特征差异对视觉效果的影响</li></ul><ol start="3"><li>感知级别比对</li></ol><ul><li>使用PSNR（峰值信噪比）评估图像质量</li><li>采用SSIM（结构相似性）衡量结构差异</li><li>对于视频还可使用VMAF等评价指标</li></ul><ol start="4"><li>差异可视化</li></ol><ul><li>生成差异热力图</li><li>标注主要差异区域</li><li>输出差异统计报告</li></ul><p>通过多维度的差异度检测，可以更客观地评估算法版本间的差异，为版本迭代决策提供依据。</p>]]></content>
      
      
      <categories>
          
          <category> 媒体处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> check、quality、choose the best </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流程决策</title>
      <link href="/posts/8f08620d.html"/>
      <url>/posts/8f08620d.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>流程决策是一种基于规则引擎的业务流程控制方案，通过预先定义的规则集合来自动化决策过程。在复杂的业务场景中，它能够帮助系统根据不同的条件自动执行相应的操作，提高业务处理的效率和准确性。</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>流程决策系统主要包含以下核心概念：</p><ol><li><strong>场景（Scene）</strong>：特定的业务场景，作为规则集合的容器</li><li><strong>规则（Rule）</strong>：在特定场景下的判断条件和执行动作的集合</li><li><strong>条件（Condition）</strong>：规则触发的前提条件，可以包含多个条件元素</li><li><strong>条件元素（Element）</strong>：构成条件的基本单元，包含参数、操作符和比较值</li><li><strong>操作符（Operator）</strong>：用于条件判断的比较符号（如：等于、大于、包含等）</li><li><strong>动作（Action）</strong>：当条件满足时需要执行的具体操作</li><li><strong>指令（Instruction）</strong>：系统可执行的具体指令集合</li><li><strong>参数（Params）</strong>：在规则执行过程中需要的参数定义</li></ol><h1 id="库表设计"><a href="#库表设计" class="headerlink" title="库表设计"></a>库表设计</h1><table><thead><tr><th>表名</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>场景表：cloud_process_scene</td><td>存储业务场景定义</td><td>作为规则的顶层容器</td></tr><tr><td>规则表：cloud_process_rule</td><td>存储具体规则信息</td><td>关联场景表</td></tr><tr><td>条件表：cloud_process_rule_condition</td><td>存储规则的触发条件</td><td>关联规则表</td></tr><tr><td>条件元素表：cloud_process_condition_element</td><td>存储条件的具体判断元素</td><td>关联条件表</td></tr><tr><td>比较符表：cloud_process_rule_operator</td><td>存储可用的比较操作符</td><td>系统预置数据</td></tr><tr><td>动作表：cloud_process_rule_action</td><td>存储规则触发后的执行动作</td><td>关联规则表</td></tr><tr><td>指令表：cloud_process_instruction</td><td>存储系统支持的指令集合</td><td>系统预置数据</td></tr><tr><td>参数表：cloud_process_params</td><td>存储规则执行所需的参数定义</td><td>支持多种参数类型</td></tr></tbody></table><h2 id="场景表：cloud-process-scene"><a href="#场景表：cloud-process-scene" class="headerlink" title="场景表：cloud_process_scene"></a>场景表：cloud_process_scene</h2><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>long</td><td>库表id，自增</td></tr><tr><td>scene_code</td><td>varchar</td><td>场景编码</td></tr><tr><td>scene_name</td><td>varchar</td><td>场景名称</td></tr><tr><td>description</td><td>varchar</td><td>场景描述</td></tr><tr><td>status</td><td>tinyint</td><td>状态：0-禁用，1-启用</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr><tr><td>modify_time</td><td>datetime</td><td>修改时间</td></tr></tbody></table><h2 id="规则表：cloud-process-rule"><a href="#规则表：cloud-process-rule" class="headerlink" title="规则表：cloud_process_rule"></a>规则表：cloud_process_rule</h2><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>long</td><td>库表id，自增</td></tr><tr><td>scene_id</td><td>long</td><td>场景ID</td></tr><tr><td>rule_code</td><td>varchar</td><td>规则编码</td></tr><tr><td>rule_name</td><td>varchar</td><td>规则名称</td></tr><tr><td>priority</td><td>int</td><td>优先级</td></tr><tr><td>status</td><td>tinyint</td><td>状态</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr><tr><td>modify_time</td><td>datetime</td><td>修改时间</td></tr></tbody></table><h2 id="条件表：cloud-process-rule-condition"><a href="#条件表：cloud-process-rule-condition" class="headerlink" title="条件表：cloud_process_rule_condition"></a>条件表：cloud_process_rule_condition</h2><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>long</td><td>库表id，自增</td></tr><tr><td>rule_id</td><td>long</td><td>规则ID</td></tr><tr><td>group_id</td><td>long</td><td>条件组ID</td></tr><tr><td>logic_type</td><td>varchar</td><td>逻辑类型(AND&#x2F;OR)</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr><tr><td>modify_time</td><td>datetime</td><td>修改时间</td></tr></tbody></table><h2 id="条件元素表：cloud-process-condition-element"><a href="#条件元素表：cloud-process-condition-element" class="headerlink" title="条件元素表：cloud_process_condition_element"></a>条件元素表：cloud_process_condition_element</h2><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>long</td><td>库表id，自增</td></tr><tr><td>condition_id</td><td>long</td><td>条件ID</td></tr><tr><td>element_type</td><td>varchar</td><td>元素类型</td></tr><tr><td>element_value</td><td>varchar</td><td>元素值</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr><tr><td>modify_time</td><td>datetime</td><td>修改时间</td></tr></tbody></table><h2 id="比较符表：cloud-process-rule-operator"><a href="#比较符表：cloud-process-rule-operator" class="headerlink" title="比较符表：cloud_process_rule_operator"></a>比较符表：cloud_process_rule_operator</h2><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>long</td><td>库表id，自增</td></tr><tr><td>operator_code</td><td>varchar</td><td>操作符编码</td></tr><tr><td>operator_name</td><td>varchar</td><td>操作符名称</td></tr><tr><td>description</td><td>varchar</td><td>操作符描述</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr><tr><td>modify_time</td><td>datetime</td><td>修改时间</td></tr></tbody></table><h2 id="动作表：cloud-process-rule-action"><a href="#动作表：cloud-process-rule-action" class="headerlink" title="动作表：cloud_process_rule_action"></a>动作表：cloud_process_rule_action</h2><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>long</td><td>库表id，自增</td></tr><tr><td>rule_id</td><td>long</td><td>规则ID</td></tr><tr><td>action_code</td><td>varchar</td><td>动作编码</td></tr><tr><td>action_name</td><td>varchar</td><td>动作名称</td></tr><tr><td>description</td><td>varchar</td><td>动作描述</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr><tr><td>modify_time</td><td>datetime</td><td>修改时间</td></tr></tbody></table><h2 id="指令表：cloud-process-instruction"><a href="#指令表：cloud-process-instruction" class="headerlink" title="指令表：cloud_process_instruction"></a>指令表：cloud_process_instruction</h2><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>long</td><td>库表id，自增</td></tr><tr><td>instruction_code</td><td>varchar</td><td>指令编码</td></tr><tr><td>instruction_name</td><td>varchar</td><td>指令名称</td></tr><tr><td>description</td><td>varchar</td><td>指令描述</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr><tr><td>modify_time</td><td>datetime</td><td>修改时间</td></tr></tbody></table><h2 id="参数表：cloud-process-params"><a href="#参数表：cloud-process-params" class="headerlink" title="参数表：cloud_process_params"></a>参数表：cloud_process_params</h2><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>long</td><td>库表id，自增</td></tr><tr><td>params_code</td><td>varchar</td><td>参数编码</td></tr><tr><td>params_name</td><td>varchar</td><td>参数名称</td></tr><tr><td>params_type</td><td>varchar</td><td>参数类型</td></tr><tr><td>params_value</td><td>varchar</td><td>参数值</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr><tr><td>modify_time</td><td>datetime</td><td>修改时间</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 媒体处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rule、decision </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>媒体处理开放平台</title>
      <link href="/posts/713ae57e.html"/>
      <url>/posts/713ae57e.html</url>
      
        <content type="html"><![CDATA[<h1 id="功能定位"><a href="#功能定位" class="headerlink" title="功能定位"></a>功能定位</h1><p>在互联网时代，将算法、模型的处理能力，封装成一系列业务能理解的接口开放出去，供第三方开发者使用，这种行为就叫做Open<br>API，提供开放API的平台本身就被称为开放平台。</p><h1 id="需求梳理"><a href="#需求梳理" class="headerlink" title="需求梳理"></a>需求梳理</h1><p>如：<a href="/posts/87af4ad.html">从0到1搭建媒体处理体系</a>的架构图所示，开放平台包括以下功能：</p><table><thead><tr><th>功能</th><th>优先级</th><th>功能说明</th><th>备注</th></tr></thead><tbody><tr><td>协议转换</td><td>T0</td><td>将千变万化的用户协议，转成内部的标准文件处理协议</td><td></td></tr><tr><td>参数校验</td><td>T2</td><td>确保入参满足要求</td><td></td></tr><tr><td>鉴权</td><td>T0</td><td>确保接入请求都合法，没有所谓的：水平越权 or 垂直越权</td><td></td></tr><tr><td>计费</td><td>T1</td><td>统计：调用次数、输入视频时长、使用cpu、gpu的时长等</td><td></td></tr><tr><td>同步转异步</td><td>T0</td><td>详见：<a href="#%E5%90%8C%E6%AD%A5%E8%BD%AC%E5%BC%82%E6%AD%A5">同步转异步</a></td><td></td></tr></tbody></table><h2 id="协议转换"><a href="#协议转换" class="headerlink" title="协议转换"></a>协议转换</h2><p>业务需求千变万化，很难通过定义一套标准，让所有人都按照固定的方式接入。因此，需要有一个系统去承接：将千变万化的用户个性化报文，转成内部的标准文件处理报文。</p><h2 id="网关形态"><a href="#网关形态" class="headerlink" title="网关形态"></a>网关形态</h2><p>站在用户视角来看：所见即所得，是比较好的用户体验方式。用技术术语来说，就是用户同步等待结果的显示。但是，对于大图片计算，长视频计算，往往也是非常费时的操作，极容易超时，因此，这就产生了2种产品形态：<br>形态1：同步等待结果模式。这个就不用展示了，太常见了。<br>形态2：任务列表模式。相关产品形态如下图所示：<br><img src="/images/task_list_mode.png"><br>备注:<br>1、任务列表模式中，前端处有一个后台线程，定时轮训后端的一个接口，获取处理结果。<br>2、虽然：云处理的网关，按照调用方式，分为：同步网关和异步网关。但这并不是说一定要搞2个代码库，大部分情况下，只有一个代码库，多个接口，不同的部署模式。</p><h2 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h2><p>本文不谈：为啥需要对接口进行鉴权？（毕竟，网上一搜有一坨的答案）。本文探讨下：媒体处理下的鉴权应该解决以下几个问题？</p><h3 id="如何确保接口参数不被修改？"><a href="#如何确保接口参数不被修改？" class="headerlink" title="如何确保接口参数不被修改？"></a>如何确保接口参数不被修改？</h3><p>常用的解决方案是：将所有入参，按照一定的规律，计算一个HMAC摘要值。公式如下：<br>算法a(api_secret,参数1，参数2，参数3…) &#x3D; sign_value，</p><p>客户端将sign_value放入到请求参数列表中去。</p><p>服务端使用同样的算法，再计算一遍，得出sign_value2，然后，对比客户端上传上来的sign_value1，是否一致，即可知道：是否有人篡改请求参数。</p><p>开放平台最好能提供sdk，方便计算sign_value。</p><h3 id="如何确保接口访问者的合法性？"><a href="#如何确保接口访问者的合法性？" class="headerlink" title="如何确保接口访问者的合法性？"></a>如何确保接口访问者的合法性？</h3><p>请求链接中带有：api_key，服务端根据api_key，获取到api_secret，再根据同样算法a算出： sign_value，跟客户端的上传过来的sign_value进行对比。<br>其中：api_secret得保密，得确保只有客户端 + 服务端知道。</p><h3 id="如何确保请求的唯一性？"><a href="#如何确保请求的唯一性？" class="headerlink" title="如何确保请求的唯一性？"></a>如何确保请求的唯一性？</h3><p>需要一uuid标记当前请求，假设客户端再次带上uuid时，服务端采用类似redis的技术方案，去判断uuid是否曾经访问过。若访问过，则拒绝请求。<br>1、通过http请求参数中，带上uuid<br>2、也可以通过带有ts的：query_string，一整串当做：uuid来处理</p><p>注意：要先检验请求的合法性，后再确保请求的唯一性</p><h3 id="如何确保请求的有效期？"><a href="#如何确保请求的有效期？" class="headerlink" title="如何确保请求的有效期？"></a>如何确保请求的有效期？</h3><p>参数中，带上ts(当前时间戳)，服务端收到请求后，通过计算时间差，若超过一定的阈值，则直接拒绝。</p><h3 id="如何避免水平越权？"><a href="#如何避免水平越权？" class="headerlink" title="如何避免水平越权？"></a>如何避免水平越权？</h3><p>api_key与开通的接口(path)，需做一个映射关系，避免越权行为的存在。</p><h3 id="如何避免key过期失效？"><a href="#如何避免key过期失效？" class="headerlink" title="如何避免key过期失效？"></a>如何避免key过期失效？</h3><p>api_key + api_secret，服务端得有效期 or 调用次数的设计，并且每隔一段时间，维护用户与api_key、api_secret之间的关系。</p><h2 id="计费"><a href="#计费" class="headerlink" title="计费"></a>计费</h2><table><thead><tr><th>功能</th><th>优先级</th><th>功能说明</th><th>备注</th></tr></thead><tbody><tr><td>按调用次数计费</td><td>T0</td><td>例如：1000次&#x2F;30元</td><td></td></tr><tr><td>包月</td><td>T0</td><td>月均： 30元</td><td></td></tr></tbody></table><p>备注：<br>1、当然了，上面2种只是最简单的计费方式。另外，会有单独的文章，专门描述如何计费。ß</p><h2 id="同步转异步"><a href="#同步转异步" class="headerlink" title="同步转异步"></a>同步转异步</h2><p>在分配计算资源触发计算之前，只有：文件url、文件大小等少量信息，不足于决策：分配合理核数的cpu or gpu。<br>因此，比较好的方式是：由机器自身根据当前自身负载情况去决策：应该计算多少量的视频个数，以确保整个集群资源负载更加均衡些，具体流程如下图所示：<br><img src="/images/sync_2_async.png"><br>备注：<br>1、在物理机时代，更是如此，若无：同步转异步功能，非常容易导致：部分机器非常忙，部分机器非常闲。<br>2、在容器化时代，通过cgroup的方式，在本业务场景下，虽说能够缓解一部分机器负载不均的问题，但是，不能解决根本问题，极容易造成成本的浪费。<br>3、底层计算域，最好统一通讯范式：异步回调。<br>4、底层cpu or gpu可以根据自己的实际负载来拖取相关任务发起计算。<br>5、当业务量大时，需采用：2阶段以上的资源分配机制，其中，第一阶段：可以由网关根据请求入参，去初步：分配使用哪个配置的：cpu池子 or<br>gpu池子去处理，然后，第二阶段：再由底层机器，根据当前负载决策并发处理：几个计算任务。<br>建议：单独搞一个：资源主动调度服务来处理， 相关章节，将会在：<a href="/posts/8e26567b.html">资源调度</a>详细阐述，这里面只是粗浅地介绍下。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>经过抽象，想要搭建一套开放平台，包括以下模块，如下图所示：<br><img src="/images/open_api_gw_1.png"></p><h2 id="鉴权设计"><a href="#鉴权设计" class="headerlink" title="鉴权设计"></a>鉴权设计</h2><h2 id="redis中keys设计"><a href="#redis中keys设计" class="headerlink" title="redis中keys设计"></a>redis中keys设计</h2><h2 id="库表设计"><a href="#库表设计" class="headerlink" title="库表设计"></a>库表设计</h2><h1 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h1><table><thead><tr><th>类别</th><th>通讯模式</th><th>http请求方式</th><th>使用场景</th><th>耗时</th><th>备注</th></tr></thead><tbody><tr><td>处理类</td><td>同步</td><td>Get</td><td>针对单个文件做简单处理</td><td>耗时一般在300ms以内</td><td></td></tr><tr><td>处理类</td><td>异步</td><td>POST</td><td>针对多个文件做复杂处理</td><td>耗时比较久</td><td></td></tr><tr><td>状态查询</td><td>同步</td><td>Get</td><td>结果查询、进度查询</td><td>耗时一般在10ms以内</td><td></td></tr><tr><td>控制类</td><td>同步</td><td>DELETE、POST</td><td>取消</td><td>耗时一般在10ms以内</td><td></td></tr></tbody></table><h2 id="处理类之同步请求"><a href="#处理类之同步请求" class="headerlink" title="处理类之同步请求"></a>处理类之同步请求</h2><p>处理步骤：获取存储在小文件存储系统中的文件，触发cpu or gpu计算后，得到的文件的二进制信息。</p><p>GET请求：</p><p>1、图片处理：&#x2F;api&#x2F;v1&#x2F;sync&#x2F;image&#x2F;{fn_code}?api_key&#x3D;&amp;ts&#x3D;&amp;sign&#x3D;&amp;url&#x3D;</p><p>2、视频处理：&#x2F;api&#x2F;v1&#x2F;sync&#x2F;video&#x2F;{fn_code}?api_key&#x3D;&amp;ts&#x3D;&amp;sign&#x3D;&amp;url&#x3D;</p><p>响应报文：</p><p>1、二进制，处理后的图片 or 视频的二进制信息，一般情况下，可以直接在浏览器上展示</p><p>2、meta的json信息</p><h2 id="处理类之异步请求"><a href="#处理类之异步请求" class="headerlink" title="处理类之异步请求"></a>处理类之异步请求</h2><p>POST请求：</p><p>1、图片处理：&#x2F;api&#x2F;v1&#x2F;async&#x2F;image&#x2F;{fn_code}?api_key&#x3D;&amp;ts&#x3D;&amp;sign&#x3D;</p><p>2、视频处理：&#x2F;api&#x2F;v1&#x2F;async&#x2F;video&#x2F;{fn_code}?api_key&#x3D;&amp;ts&#x3D;&amp;sign&#x3D;</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;notifyUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;media_urls&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;width&quot;</span><span class="punctuation">:</span> <span class="number">1080</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;heidht&quot;</span><span class="punctuation">:</span> <span class="number">720</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span> <span class="number">60</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cmds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;cmd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extra&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>3、文生图：&#x2F;api&#x2F;v1&#x2F;async&#x2F;text&#x2F;{fn_code}?api_key&#x3D;&amp;ts&#x3D;&amp;sign&#x3D;</p><p>4、文生视频：&#x2F;api&#x2F;v1&#x2F;async&#x2F;text&#x2F;{fn_code}?api_key&#x3D;&amp;ts&#x3D;&amp;sign&#x3D;</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;notifyUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extra&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>异步接口响应报文</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;error_code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;error_msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>异步接口回调报文</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;msg_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;media_urls&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;url&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extra&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;file_size&quot;</span><span class="punctuation">:</span> <span class="number">1111</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mp4&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mask&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extra&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;file_size&quot;</span><span class="punctuation">:</span> <span class="number">1111</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jpg&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;face&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extra&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;file_size&quot;</span><span class="punctuation">:</span> <span class="number">1111</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mp4&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extra&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;alg_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="状态查询"><a href="#状态查询" class="headerlink" title="状态查询"></a>状态查询</h2><p>GET请求：</p><p>1、结果查询：&#x2F;api&#x2F;v1&#x2F;result?api_key&#x3D;&amp;ts&#x3D;&amp;sign&#x3D;&amp;msg_id&#x3D;</p><p>注意：此类情况下，无需做唯一性检测</p><p>响应报文</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;media_urls&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;url&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extra&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;file_size&quot;</span><span class="punctuation">:</span> <span class="number">1111</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mp4&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mask&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extra&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;file_size&quot;</span><span class="punctuation">:</span> <span class="number">1111</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jpg&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;face&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extra&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;file_size&quot;</span><span class="punctuation">:</span> <span class="number">1111</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mp4&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extra&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;alg_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alg_cost&quot;</span><span class="punctuation">:</span> <span class="number">111</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>2、状态查询：&#x2F;api&#x2F;v1&#x2F;status?api_key&#x3D;&amp;ts&#x3D;&amp;sign&#x3D;&amp;msg_id&#x3D;</p><p>响应报文</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;handle_code&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;handle_msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;handle_cost&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;step_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;step_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;download&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;step_cost&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;step_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image_info&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;step_cost&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;step_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;upload&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;step_cost&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="控制类"><a href="#控制类" class="headerlink" title="控制类"></a>控制类</h2><p>1、取消</p><p>DELETE请求：&#x2F;api&#x2F;v1&#x2F;cancel?api_key&#x3D;&amp;ts&#x3D;&amp;sign&#x3D;&amp;msg_id&#x3D;</p><p>响应报文</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extra&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;alg_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alg_cost&quot;</span><span class="punctuation">:</span> <span class="number">111</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 媒体处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网关、开放平台 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据集市</title>
      <link href="/posts/b361174a.html"/>
      <url>/posts/b361174a.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>当某个app的DAU呈45°上扬，从百万DAU，到千万DAU，甚至过亿DAU，无论是组织架构，还是：经典的db +<br>缓存策略，会变得越来越无法灵活面对纷繁复杂的业务场景。具体表现如下：</p><h2 id="专业人做专业事"><a href="#专业人做专业事" class="headerlink" title="专业人做专业事"></a>专业人做专业事</h2><p>任何一个团队的成员构成比例，既有资深的，也有新人。一般情况下，都是让新人介入实际业务需求，那么，该新人就得在熟悉业务的前提下，也需熟悉目前的：db +<br>缓存策略。那么，可否让新人刚开始只关注于：业务。等业务熟悉以后，再去关注：db + 缓存策略呢？</p><h2 id="成本优化"><a href="#成本优化" class="headerlink" title="成本优化"></a>成本优化</h2><p>过五百万dau以后的业务，功能也是非常多的，此时，db +<br>cache策略一般都还在业务代码中，面对如此境遇，单靠2、3个所谓的架构师，想要在确保当前功能不变的情况下，做到：性能优化 or<br>成本优化，其实，还是有很大的挑战的。</p><h2 id="多语言下中间件的困境"><a href="#多语言下中间件的困境" class="headerlink" title="多语言下中间件的困境"></a>多语言下中间件的困境</h2><p>在很多公司的后端工程领域，都有3种以上的语言(例如：php、java、go)<br>，每种中间件都必须提供3种语言的sdk版本，这给中间件带来一定的维护成本，也给业务方的学习成本、升级成本。以redis为例，虽然redis提供了相当丰富的功能，但是，站在业务方的角度上说，它需要关心：redis的key是怎么设计的、redis的缓存策略、redis客户端怎么用、对应的sdk使用姿势、实际业务如何适配等等，中间件团队能否提供更多、更丰富的基础的服务，业务方，只需要往这个服务喂数据，类比于：service<br>mesh，通过sidecar的方式（与应用层解耦，单独发布），解决业务层：服务注册 + 服务治理 + 网络通讯<br>负载均衡等问题。而：数据集市，是通过独立公共服务，解决的业务层的数据存取的问题.</p><h1 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h1><p>数据集市：将部分特定的、有规律的数据存取，通过指定的方案来解，期许达到：成本 +<br>性能的最大收益化。再次强调下：沉淀到数据集市的数据，100%是有规律的。接入时，一定得先分析数据，看是否有规律，若一时半会看不出规略，则业务方先采用通用的解决方案来处理。例如：数据集市，将处理以下有规律的数据：</p><table><thead><tr><th>类别</th><th>特点</th><th>具体场景</th><th>备注</th></tr></thead><tbody><tr><td>必中类</td><td>根据key，必有数据，数据变化频率非常小</td><td>例如：用户类数据，用户性别、用户昵称、用户备注，通过通用的缓存策略来做，有点：大材小用</td><td></td></tr><tr><td>空查类</td><td>空查率比较高</td><td>例如：某个feed，该用户是否点赞过？可构建布隆索引，优化mc的存储量，减轻对mc的访问量</td><td></td></tr><tr><td>宽表类</td><td>kv类，非关系型数据，数据格式杂</td><td>例如：媒体库，它关心媒体的相关数据，例如：宽、高、url地址、类别、来源等，但是，像：同款效果、修图配方等，它跟媒体有关，但是，又不太相关。</td><td></td></tr><tr><td>累计类</td><td>对过去一段时间，做累计：count、sum、max、min、distinct、top n 等</td><td>统计类，月账、天账、时账、秒账等，提供基于时间窗的查询，例如：过去7day，有多少人给这条feed点赞</td><td>假设：每天的明细账上亿，那么，直接过去7day，直接：select count(*)，无论是哪款数据库，直接挂了，如果是去重，那就问题更大了</td></tr><tr><td>快照类</td><td>日志类数据，提供帮助、协助定位问题，可牺牲的，提供临时查询的</td><td>例如：dag执行过程中的任务事件表，规则引擎的路径分析、马甲的触发任务信息</td><td>mysql的ab库，或者：hbase中的ttl，基于成本考量，定时删除。</td></tr></tbody></table><h2 id="站在业务方的视角"><a href="#站在业务方的视角" class="headerlink" title="站在业务方的视角"></a>站在业务方的视角</h2><p>站在业务方的角度上说：数据集市，可以简单如此理解：将工程里的db、cache，部分场景抽象出一个通用数据服务来，让业务方无需关心：数据量大、查询量大的双重问题，专注于业务逻辑，而不需要关心以下事情：<br>a、是否使用关系型数据库，例如：mysql，还是非关系型数据库，例如：hbase，<br>b、假设是mysql，是否需分库分表？<br>c、缓存策略是什么？淘汰策略是什么？等<br>d、是否需要使用：布隆索引？<br>再次强调下：数据集市，不是为了替换掉业务的db + cache，而是将特定规律的数据存取通过特定的方案来解，期许达到：成本、性能的最大收益化。</p><h2 id="站在中间件的角度"><a href="#站在中间件的角度" class="headerlink" title="站在中间件的角度"></a>站在中间件的角度</h2><p>站在中间件的角度再次理解下：数据集市&#x3D;中间件+服务化+部分业务。例如：dbproxy的作用：让业务方无需面对分库分表，而数据集市，就是让业务方无需面对分库分表 +<br>缓存策略。</p><h2 id="模块划分"><a href="#模块划分" class="headerlink" title="模块划分"></a>模块划分</h2><table><thead><tr><th>类别</th><th>作用</th><th>包括概念</th><th>备注</th></tr></thead><tbody><tr><td>数据接入</td><td>将数据标准化接入</td><td>数据源（DataSource）、数据列（DataColumn）、数据主键(DataKey)、接入码：AccessCode</td><td>注意：这里面的概念，是针对于：设计数据集市的人而言的，并不是：针对于业务方的。通过http接口 或者：kafka消息，能够快速接入数据。</td></tr><tr><td>数据取</td><td>根据业务方的具体需求，提供它想要的数据视图</td><td>取数器（DataPicker）、数据点（DataPoint）、数据集（DataSet）、数据流（DataFlow）、算子（DataFn)、缓存策略、布隆索引策略</td><td>这里面的概念，是针对于：设计数据集市的人而言的，并不是：针对于业务方的，业务方只管取.</td></tr><tr><td>数据计算</td><td>帮忙业务方解决：重复调用、计算耗时长等问题</td><td>预计算、合并计算、单个计算、批计算、执行计划、缓存策略、布隆索引策略</td><td>业务方只管获取数据。</td></tr><tr><td>数据存储</td><td>冷热存储、mysql or hbase、过期策略</td><td>存储介质的选择、冷热数据存储策略、分库分表、过期策略</td><td>业务方无需关心</td></tr></tbody></table><h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h2 id="取数器：DataPicker"><a href="#取数器：DataPicker" class="headerlink" title="取数器：DataPicker"></a>取数器：DataPicker</h2><p>某种数据的获取方式或者动作，可以通过groovy来定义，也可以直接使用java动态生成，重点在于：它可动态生成，无需改动代码。</p><h2 id="数据点：DataPoint"><a href="#数据点：DataPoint" class="headerlink" title="数据点：DataPoint"></a>数据点：DataPoint</h2><p>具有业务含义的数据，代表具体某个业务的某个值，例如：用户性别，用户年龄，来源媒体宽等。它跟取数器的关系：一（取数器）对多（数据点），任何一个数据点有且只能对应一个取数器，而一个取数器能够产生多个数据点。数据点有一属性，叫类别，就是为了描述之前提到的：名单类，可信类，宽表类等，因此，计算数据点过程中，需根据类别，做不同的方式的计算。<br>数据点有两种计算方式：预计算 跟 合并计算。<br>具体而言：假设一个业务处理过程，需调外部服务(s1、s2、s3、s5)来获取数据：其中，s3是耗时比较长的，而s1需要调用两次(<br>并非开发人员故意造成的，而是业务不熟悉 + 代码链路太长，不清楚有这个重复调用)。<br><img src="/images/datamark_step_1.png"><br>，那么，如何减少重复计算 + 加速呢？答案是：预计算 + 合并计算。<br><img src="/images/datamark_step_2.png"></p><p>其中，预先计算：数据点1跟数据点3，而数据点3对应的s3服务，本身耗时比较长，由于提前异步线程：预先计算，因此，当真正业务需要使用到时，它可能已经计算完毕或者业务需要等待的时间比较短，从而缩短耗时。</p><h2 id="数据集：DataSet"><a href="#数据集：DataSet" class="headerlink" title="数据集：DataSet"></a>数据集：DataSet</h2><p>面向业务方的数据集，它由1~n个数据点的值构成。数据集跟数据点的关系：是多对多，任何一个数据集由多个数据点组成，而任意一个数据点也能被多个数据集引用。</p><h2 id="算子：DataFn"><a href="#算子：DataFn" class="headerlink" title="算子：DataFn"></a>算子：DataFn</h2><p>对ds的变换操作，称做算子，它包含两类：map型算子，join算子，其中，join型算子，它关注的是：多个ds，聚合成一个新的ds，例如：left<br>join算子，right join算子、inner join 算子等，而map型算子，它关注的是：一个ds变成另外一个ds，例如：flat map算子，map算子等。</p><p><img src="/images/datamark_flow_1.png"></p><h2 id="数据流：DataFlow"><a href="#数据流：DataFlow" class="headerlink" title="数据流：DataFlow"></a>数据流：DataFlow</h2><p>任何一个纷繁复杂的业务，都可以组成一个dag，它由ds跟算子构成一个DAG，那么，基于业务配置的DAG，可以做以下事情：dag拆分、剪枝、dag引擎执行计划优化等。</p>]]></content>
      
      
      <categories>
          
          <category> 高性能、高并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 预计算、合并计算、数据集市 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多云元数据服务</title>
      <link href="/posts/87696e09.html"/>
      <url>/posts/87696e09.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>如前文所述，想要搭建一套云处理体系，有很多配置需要CRUD，因此，需要一套元数据配置服务，存储 or 读取相关配置，以便做下一步业务逻辑。</p><h1 id="功能梳理"><a href="#功能梳理" class="headerlink" title="功能梳理"></a>功能梳理</h1><table><thead><tr><th>功能点</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>url解析成uri</td><td>将文件url解析成cloud、bucket、key，方便在多云环境下，能够正常上传、下载文件</td><td></td></tr><tr><td>多云下的bucket关联域名</td><td>bucket与host关联，提供url解析的元数据信息</td><td></td></tr><tr><td>域名打标签</td><td>任何一个域名，会关联多个标签，方便不同业务场景分发不同的域名</td><td></td></tr><tr><td>url重签</td><td>私有桶的url容易过期，需要一种方式重新对url重签</td><td></td></tr><tr><td>ak&#x2F;sk</td><td>bucket与ak&#x2F;sk的关系，也是一对多，也需配置：标签的功能，标记在什么样的情况下，使用哪一组ak&#x2F;sk</td><td></td></tr></tbody></table><p>备注：<br>1、一个host只能找到唯一的bucket与之对应。<br>2、ak&#x2F;sk与标签的关系：一对一<br>3、host与标签的关系：一对多</p><h1 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h1><p>注意：并不一定需要单独的http服务，业务量级小的时候，也可是网关的一个模块。</p><h2 id="yml设计"><a href="#yml设计" class="headerlink" title="yml设计"></a>yml设计</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aliyun:</span></span><br><span class="line">  <span class="attr">mifish-video:</span></span><br><span class="line">    <span class="attr">hosts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">mifish.video.cdn.outer.com</span></span><br><span class="line">        <span class="attr">tags:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">jdcdn</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">wangsucdn</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">mifish.video.inner.com</span></span><br><span class="line">        <span class="attr">tags:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">inner</span></span><br><span class="line">    <span class="attr">auth:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">ak:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="attr">sk:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="attr">tag:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">ak:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="attr">sk:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="attr">tag:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">hwcloud:</span></span><br><span class="line">  <span class="attr">mifish-img:</span></span><br><span class="line">    <span class="attr">hosts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">mifish.img.cdn.outer.com</span></span><br><span class="line">        <span class="attr">tags:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">jdcdn</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">hwcdn</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">mifish.img.inner.com</span></span><br><span class="line">        <span class="attr">tags:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">inner</span></span><br><span class="line">    <span class="attr">auth:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">ak:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="attr">sk:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="attr">tags:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">ak:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="attr">sk:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="attr">tags:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="mysql库表设计"><a href="#mysql库表设计" class="headerlink" title="mysql库表设计"></a>mysql库表设计</h2><h2 id="桶信息：cloud-process-bucket"><a href="#桶信息：cloud-process-bucket" class="headerlink" title="桶信息：cloud_process_bucket"></a>桶信息：cloud_process_bucket</h2><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>long</td><td>库表id，自增</td></tr><tr><td>creator</td><td>varchar(32)</td><td>创建者</td></tr><tr><td>modifier</td><td>varchar(32)</td><td>修改者</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr><tr><td>modify_time</td><td>datetime</td><td>修改时间</td></tr><tr><td>cloud</td><td>varchar(32)</td><td>哪个云</td></tr><tr><td>region</td><td>varchar(32)</td><td>归属哪个区域</td></tr><tr><td>bucket_name</td><td>varchar(32)</td><td>桶名称</td></tr><tr><td>owner</td><td>varchar(128)</td><td>业务方</td></tr><tr><td>remark</td><td>varchar(256)</td><td>备注信息</td></tr></tbody></table><h2 id="桶鉴权：cloud-process-bucket-auth"><a href="#桶鉴权：cloud-process-bucket-auth" class="headerlink" title="桶鉴权：cloud_process_bucket_auth"></a>桶鉴权：cloud_process_bucket_auth</h2><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>long</td><td>库表id，自增</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr><tr><td>modify_time</td><td>datetime</td><td>修改时间</td></tr><tr><td>bucket_id</td><td>long</td><td>关联id</td></tr><tr><td>ak</td><td>varchar(32)</td><td>ak</td></tr><tr><td>sk</td><td>varchar(32)</td><td>sk</td></tr><tr><td>tags</td><td>varchar(256)</td><td>标签</td></tr></tbody></table><h2 id="桶域名：cloud-process-bucket-domain"><a href="#桶域名：cloud-process-bucket-domain" class="headerlink" title="桶域名：cloud_process_bucket_domain"></a>桶域名：cloud_process_bucket_domain</h2><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>long</td><td>库表id，自增</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr><tr><td>modify_time</td><td>datetime</td><td>修改时间</td></tr><tr><td>bucket_id</td><td>long</td><td>关联id</td></tr><tr><td>host</td><td>varchar(128)</td><td>域名</td></tr><tr><td>tags</td><td>varchar(256)</td><td>标签</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 媒体处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cloud bucket config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>说说报文</title>
      <link href="/posts/4e3b4542.html"/>
      <url>/posts/4e3b4542.html</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>通信报文，说白了就是一串有规律的、易于理解的数据流，而“有规律”就是用技术规范、协议、标准、接口文档等来描述的。对于我们而言，一般就是接口文档；</p><h2 id="为啥需要报文"><a href="#为啥需要报文" class="headerlink" title="为啥需要报文"></a>为啥需要报文</h2><p>各个计算机设备之间，需要交换数据，数据是通过网络来传送的，而在网络上传送的数据都是基于0或1这样的二进制数据，如果没有对数据进行编码，则这些数据没有人能够理解，属于没有用的数据。而经过一些协议、技术规范、接口文档等规范过的数据(<br>有规律的数据流，也就是通讯报文)，才是有用的数据，才能被别人理解。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>按通讯报文的具体格式分，比较常用的有以下几种：<br>1、定长报文<br>2、ISO8583报文<br>3、分隔符报文<br>4、Xml报文<br>5、Schema报文<br>6、Json报文<br>7、Swift：MT、MX报文<br>8、混合报文<br>9、pb报文<br>10、hession报文</p><p>备注：</p><p>1、互联网目前用的比较多的报文还是：http + json报文。</p>]]></content>
      
      
      <categories>
          
          <category> 网关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报文格式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视频处理功能集</title>
      <link href="/posts/39737ff6.html"/>
      <url>/posts/39737ff6.html</url>
      
        <content type="html"><![CDATA[<h1 id="音视频处理功能"><a href="#音视频处理功能" class="headerlink" title="音视频处理功能"></a>音视频处理功能</h1><h2 id="音视频meta信息"><a href="#音视频meta信息" class="headerlink" title="音视频meta信息"></a>音视频meta信息</h2><p>获取指定音频、视频资源的元信息，例如：宽、高、码率、帧率、文件大小、时长</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;streams&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;codec_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;aac&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;codec_long_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AAC (Advanced Audio Coding)&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;profile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LC&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;codec_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;audio&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;codec_tag_string&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mp4a&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;codec_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x6134706d&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sample_fmt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fltp&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sample_rate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;44100&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;channels&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;channel_layout&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mono&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bits_per_sample&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;r_frame_rate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0/0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;avg_frame_rate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0/0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;time_base&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1/44100&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_pts&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;duration_ts&quot;</span><span class="punctuation">:</span> <span class="number">2284491</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span> <span class="string">&quot;51.802517&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bit_rate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;128039&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;nb_frames&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2231&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extradata_size&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;disposition&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dub&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;original&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lyrics&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;karaoke&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;forced&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hearing_impaired&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;visual_impaired&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;clean_effects&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;attached_pic&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;timed_thumbnails&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;captions&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;descriptions&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dependent&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;still_image&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;creation_time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-02-23T13:46:34.000000Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eng&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;handler_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SoundHandle&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;vendor_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[0][0][0][0]&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;codec_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;h264&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;codec_long_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;profile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Constrained Baseline&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;codec_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;video&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;codec_tag_string&quot;</span><span class="punctuation">:</span> <span class="string">&quot;avc1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;codec_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x31637661&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;width&quot;</span><span class="punctuation">:</span> <span class="number">1080</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">1920</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;coded_width&quot;</span><span class="punctuation">:</span> <span class="number">1080</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;coded_height&quot;</span><span class="punctuation">:</span> <span class="number">1920</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;closed_captions&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;film_grain&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;has_b_frames&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pix_fmt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yuv420p&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="number">40</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;color_range&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tv&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;color_space&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bt709&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;color_transfer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bt709&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;color_primaries&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bt709&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;chroma_location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;left&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;field_order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;progressive&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;refs&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;is_avc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;nal_length_size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;r_frame_rate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;120/1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;avg_frame_rate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;27405000/2324909&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;time_base&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1/90000&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_pts&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;duration_ts&quot;</span><span class="punctuation">:</span> <span class="number">4649818</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span> <span class="string">&quot;51.664644&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bit_rate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6153719&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bits_per_raw_sample&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;nb_frames&quot;</span><span class="punctuation">:</span> <span class="string">&quot;609&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extradata_size&quot;</span><span class="punctuation">:</span> <span class="number">33</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;disposition&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dub&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;original&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lyrics&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;karaoke&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;forced&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hearing_impaired&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;visual_impaired&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;clean_effects&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;attached_pic&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;timed_thumbnails&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;captions&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;descriptions&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dependent&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;still_image&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;creation_time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-02-23T13:46:34.000000Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eng&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;handler_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VideoHandle&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;vendor_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[0][0][0][0]&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;filename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1gO0elRuVp8xPw2wvIP3VwZx3Zo.mp4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nb_streams&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nb_programs&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;format_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mov,mp4,m4a,3gp,3g2,mj2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;format_long_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;QuickTime / MOV&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span> <span class="string">&quot;51.802500&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;40591710&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bit_rate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6268687&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;probe_score&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;major_brand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mp42&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;minor_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;compatible_brands&quot;</span><span class="punctuation">:</span> <span class="string">&quot;isommp42&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;creation_time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-02-23T13:46:34.000000Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;com.android.version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>生成上面的meta信息，底层使用的算法是ffprobe，命令行如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffprobe -v quiet -print_format json -show_format -show_streams -loglevel error source.mp4</span><br></pre></td></tr></table></figure><h2 id="音频提取"><a href="#音频提取" class="headerlink" title="音频提取"></a>音频提取</h2><p>从一个视频中提取音频，不截断</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i &#123;0&#125; -vn -y -acodec libfdk_aac &#123;1&#125; -loglevel error</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可以指定提取的音频时长</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i &#123;0&#125; -vn -y -acodec libfdk_aac -ss &#123;1&#125; -t &#123;2&#125; &#123;3&#125; -loglevel error</span><br></pre></td></tr></table></figure><h2 id="视频转码"><a href="#视频转码" class="headerlink" title="视频转码"></a>视频转码</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i b45245ccfedcaa6373ee4e4b36b47b98.mov -s 1280x720 -profile:v high444 -c:v libx264 -preset veryslow -crf 30 -r 30 -g 120 -keyint_min 30 -sc_threshold 40 -bf 3 -b_strategy 2 -refs 5 -c:a libfdk_aac -profile:a aac_low -b:a 128k -movflags faststart -max_muxing_queue_size 9999 -f mp4 -loglevel error 720_3.mp4 -y</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="文字水印（明水印）"><a href="#文字水印（明水印）" class="headerlink" title="文字水印（明水印）"></a>文字水印（明水印）</h2><h2 id="logo水印（明水印）"><a href="#logo水印（明水印）" class="headerlink" title="logo水印（明水印）"></a>logo水印（明水印）</h2><h2 id="斜水印（明水印）"><a href="#斜水印（明水印）" class="headerlink" title="斜水印（明水印）"></a>斜水印（明水印）</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i &#123;0&#125; -f lavfi -i &#x27;color=&#123;1&#125;@0:s=&#123;2&#125;,format=yuva420p&#x27; -filter_complex &#x27;&quot; \</span><br><span class="line">                   &quot;[1]trim=end_frame=1,drawtext=fontfile=&#123;3&#125;:text=&#123;4&#125;:fontsize=&#123;5&#125;:fontcolor=&#123;6&#125;:alpha=&#123;7&#125;,&quot; \</span><br><span class="line">                   &quot;split[text][alpha];[text][alpha]alphamerge,rotate=(&#123;8&#125;):ow=rotw(&#123;9&#125;):oh=roth(&#123;10&#125;):c=black@0,&quot; \</span><br><span class="line">                   &quot;loop=-1:1:0,tile=30x9,trim=end_frame=1[wm];[0][wm]overlay=0:0&#x27; -c:v libx264 -crf 25 &quot; \</span><br><span class="line">                   &quot;-c:a libfdk_aac -profile:a aac_low -b:a 128k -movflags faststart -y &#123;11&#125; -loglevel error</span><br></pre></td></tr></table></figure><h2 id="数字水印（暗水印）"><a href="#数字水印（暗水印）" class="headerlink" title="数字水印（暗水印）"></a>数字水印（暗水印）</h2><h2 id="超分"><a href="#超分" class="headerlink" title="超分"></a>超分</h2><h2 id="截帧"><a href="#截帧" class="headerlink" title="截帧"></a>截帧</h2><h2 id="超清"><a href="#超清" class="headerlink" title="超清"></a>超清</h2><h2 id="人像增强"><a href="#人像增强" class="headerlink" title="人像增强"></a>人像增强</h2>]]></content>
      
      
      <categories>
          
          <category> 媒体处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 功能说明 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片处理功能集</title>
      <link href="/posts/b37b04e8.html"/>
      <url>/posts/b37b04e8.html</url>
      
        <content type="html"><![CDATA[<h2 id="图片处理功能"><a href="#图片处理功能" class="headerlink" title="图片处理功能"></a>图片处理功能</h2><p>对存储在小文件系统里的图片地址，进行相关的处理，注意：请确保相关的url地址能够正常下载 or 访问。</p><h3 id="图片基本信息"><a href="#图片基本信息" class="headerlink" title="图片基本信息"></a>图片基本信息</h3><p>获取图片的基本信息，例如：图片格式、文件大小、色彩模型、宽、搞、帧个数，格式如下：</p>   <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JPEG&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;width&quot;</span><span class="punctuation">:</span> <span class="number">224</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">224</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;orientation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;colorModel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sRGB&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;frameNumber&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fileSize&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6574B&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br>使用限制：20M以内<h3 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h3><p>在不太可能影响画质的情况下，将图片进行压缩，压缩后，分辨率不变，格式不变，而文件体系变小，便于降低CDN的分发成本，加快图片的加载速度，提升用户体验</p><h3 id="图片缩略"><a href="#图片缩略" class="headerlink" title="图片缩略"></a>图片缩略</h3><h3 id="图片裁剪"><a href="#图片裁剪" class="headerlink" title="图片裁剪"></a>图片裁剪</h3><h3 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h3><h3 id="文字水印"><a href="#文字水印" class="headerlink" title="文字水印"></a>文字水印</h3><h3 id="logo水印"><a href="#logo水印" class="headerlink" title="logo水印"></a>logo水印</h3><h3 id="暗水印"><a href="#暗水印" class="headerlink" title="暗水印"></a>暗水印</h3><h3 id="图片合并"><a href="#图片合并" class="headerlink" title="图片合并"></a>图片合并</h3>]]></content>
      
      
      <categories>
          
          <category> 媒体处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 功能说明 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dag引擎</title>
      <link href="/posts/394f6975.html"/>
      <url>/posts/394f6975.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在实际媒体处理的业务场景中，复杂业务逻辑往往涉及多个步骤、多个模块、多个原子化动作，组合、协同工作，才能顺利完成。而任务编排通过将多个函数组织成有序的执行流程，使得开发者能够更自然地表达和管理复杂的业务逻辑。这种能力，业界称之为：工作流(<br>Workflow）or dag引擎（本文无特殊说明，用dag引擎代表）。举些例子：</p><h2 id="图片计算流程图"><a href="#图片计算流程图" class="headerlink" title="图片计算流程图"></a>图片计算流程图</h2><p><img src="/images/thumb_img_meta.png"></p><h2 id="切片加速流程图"><a href="#切片加速流程图" class="headerlink" title="切片加速流程图"></a>切片加速流程图</h2><p><img src="/images/slice_dag_1.png"></p><h2 id="转码流程图"><a href="#转码流程图" class="headerlink" title="转码流程图"></a>转码流程图</h2><p><img src="/images/tc_dag_2.png"></p><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><h2 id="数据流向-任务编排"><a href="#数据流向-任务编排" class="headerlink" title="数据流向 -&gt; 任务编排"></a>数据流向 -&gt; 任务编排</h2><p>从数据流向来看，分为：</p><p>1、直线型pipeline：一个步骤的输出直接传递给下一个步骤的输入。</p><p>2、dag型pipeline：多个步骤的输出，当做下一个步骤的输入 + 一个步骤的输出，当做多个步骤的输入。</p><h2 id="同步-or-异步"><a href="#同步-or-异步" class="headerlink" title="同步 or 异步"></a>同步 or 异步</h2><p>在实际的媒体处理业务场景中，由于计算耗时长的原因，一般很少使用：dag引擎来编排同步处理业务。大部分都是走：异步回调的模式。因此，所实现的任务编排，需支持：异步回调的风格。</p><h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><p>一般异步回调，都会有：notify_url字段 + 唯一id存在，建议：业务方不强依赖于：唯一id，而是通过：notify_url里带上业务自身的唯一id来处理。</p><p>例如：notify_url：<a href="http://xxxxx.xxxx.com/api/v1/media/notify?id=xxxx">http://xxxxx.xxxx.com/api/v1/media/notify?id=xxxx</a></p><p>注意：唯一id，是相对而言的，最好由各自确保各自的id唯一，并不由别人来确保自身id的唯一。</p><h2 id="并行调度"><a href="#并行调度" class="headerlink" title="并行调度"></a>并行调度</h2><p>如文档：<a href="/posts/4d3edad6.html">视频切片并行加速</a>所述视频处理加速方法之一：切片并行加速，它其实也是一种任务编排，因此，它可由DAG引擎去编排整个任务。举个例子：<br><img src="/images/slice_dag_1.png"></p><p>1、视频meta信息提取 与 音频提取，它们2个是并行处理，可事先画出来。<br>2、并行切片与并行gpu处理，里面处理视频的个数，无法事先画出来，只能用虚线来表示。<br>3、视频切片并行加速，重：并行调度，弱编排。</p><h2 id="执行时间"><a href="#执行时间" class="headerlink" title="执行时间"></a>执行时间</h2><p>基于成本的考量，部分任务，业务侧虽然已经触发，但是，可允许“24”个小时再回调，因此，节点的执行，分为：准实时执行 + 延时执行。</p><h2 id="重试机制"><a href="#重试机制" class="headerlink" title="重试机制"></a>重试机制</h2><p>如之前描述：由于媒体处理，重cpu or gpu计算，非常容易卡死 + 不涉及事务，又由于cpu计算 or gpu计算执行多次，不改变结果，因此，可设计重试机制：</p><p>严格意义上讲：只存在：节点重试，并没有任务重试，对于业务方而言，任务重试，相当于重新触发新的任务，只是再通知业务方时，需使用同一个：唯一键，来告知业务方结果。_</p><table><thead><tr><th>重试类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>超时重试</td><td>超过一定时间后，重新触发执行，一般情况下，由CB体系触发</td><td></td></tr><tr><td>失败重试</td><td>失败后，自动重试，支持：代码自动重试 + cb体系触发重试 + 手动触发重试</td><td></td></tr></tbody></table><h1 id="cb体系"><a href="#cb体系" class="headerlink" title="cb体系"></a>cb体系</h1><p>如：重试机制上描述的一样，换个角度再次审视下：由于中间各个步骤，包括了大量的：cpu or<br>gpu计算服务，非常容易卡死、奔溃，导致整体任务长时间未收到回调，因此，需要check bill<br>system，定时、延时触发check任务状态，假设超过一定的时间阈值，重试<br>or 设置整个任务为失败。流程图如下：</p><p><img src="/images/dag_cb_1.png"></p><h2 id="业界情况"><a href="#业界情况" class="headerlink" title="业界情况"></a>业界情况</h2><table><thead><tr><th>业界产品</th><th>作用</th><th>功能说明</th><th>备注</th></tr></thead><tbody><tr><td>Celery</td><td>严格意义上讲：它不应该是是dag引擎，它更多的是：分布式任务队列系统，用于处理异步任务和消息传递</td><td></td><td></td></tr><tr><td>Dask</td><td>严格意义上讲：它也不是：dag引擎，Dask 是一个用于并行计算的灵活工具，特别适合处理大规模数据和分布式计算</td><td></td><td></td></tr><tr><td>osworkflow</td><td>一个轻量化的流程引擎</td><td></td><td></td></tr><tr><td>activiti</td><td>由alfresco软件开发，目前最高版本activiti 7</td><td></td><td></td></tr><tr><td>camunda</td><td>Camunda基于activiti5，所以其保留了PVM，最新版本Camunda7.15，保持每年发布2个小版本的节奏</td><td></td><td></td></tr></tbody></table><p>备注：<br>1、对于：媒体处理而言，任务编排与并行调度放在一起实现，是更合理的一种方式。</p><h1 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h1><p>设计一款满足：媒体处理场景下的工作流引擎，包括以下模块：<br><img src="/images/dag_1.png"></p><h2 id="节点设计"><a href="#节点设计" class="headerlink" title="节点设计"></a>节点设计</h2><table><thead><tr><th>节点类型</th><th>作用</th><th>执行次数</th><th>备注</th></tr></thead><tbody><tr><td>开始节点</td><td>执行dag引擎的开始动作</td><td>执行一次</td><td></td></tr><tr><td>结束节点</td><td>执行dag引擎后的结束动作</td><td>执行N次</td><td></td></tr><tr><td>路由节点</td><td>上一个节点执行完后，根据一定的路由执行下一个节点</td><td></td><td></td></tr><tr><td>同步脚本节点</td><td>同步等待处理结果，短时间之内即可处理完，因此，同步等待结果</td><td></td><td></td></tr><tr><td>异步脚本节点</td><td>处理时长太长，无法同步等待，后续回调，找到对应的执行节点继续处理</td><td></td><td></td></tr><tr><td>并行节点</td><td>某个节点，有多个输出结果，下一个节点需并行处理</td><td></td><td></td></tr><tr><td>子业务流节点</td><td>某个节点，有多个输出结果，下一个节点需并行处理</td><td></td><td></td></tr><tr><td>回调节点</td><td>回调通知业务方处理结果</td><td>就算没有执行到，也得执行一次</td><td></td></tr></tbody></table><p>备注：<br>1、回调节点，当需要支持：多种类型的回调时使用，但是：接口协议中，也需要设计回调，也就是说：当整个dag引擎检测到：卡死在某个接口中时，触发协议中的回调接口。</p><h2 id="任务追踪"><a href="#任务追踪" class="headerlink" title="任务追踪"></a>任务追踪</h2><table><thead><tr><th>名词</th><th>解释</th><th>关系</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>task</td><td>任务</td><td>一次请求，对应一笔任务</td><td>一笔切片请求，对应一笔任务</td><td>可使用UUID生成唯一的：task_id</td></tr><tr><td>event</td><td>事件</td><td>task 与event 是一对多的关系</td><td>一个dag节点，对应一个事件</td><td>event_id &#x3D; task_id + “_” + node_name</td></tr><tr><td>segment</td><td>片</td><td>event 与 segment 是一对多的关系</td><td>一个视频片，对应一个event</td><td>segment_id &#x3D; event_id + “_” + order</td></tr><tr><td>trace</td><td>跟踪</td><td>trace 与 event、segment 是一对多的关系</td><td>一次cpu、gpu计算，对应一次trace</td><td>可使用UUID生成唯一的：trace_id</td></tr></tbody></table><h2 id="执行计划优化"><a href="#执行计划优化" class="headerlink" title="执行计划优化"></a>执行计划优化</h2><p>业务dag与代码执行dag往往有差异。因此，需要对：dag进行剪枝。</p><h1 id="库表设计"><a href="#库表设计" class="headerlink" title="库表设计"></a>库表设计</h1><table><thead><tr><th>表名</th><th>作用</th><th>id生成策略</th><th>备注</th></tr></thead><tbody><tr><td>Pipeline表</td><td>描述业务所期许的：步骤集 + 流程</td><td></td><td></td></tr><tr><td>task表</td><td>记录一次任务的执行过程，记录任务的请求参数 + 结果</td><td>可使用UUID生成唯一的：task_id</td><td></td></tr><tr><td>event表</td><td>记录节点事件的执行过程</td><td>event_id &#x3D; task_id + “_” + node_name</td><td></td></tr><tr><td>segment表</td><td>记录节点分片的执行过程</td><td>segment_id &#x3D; event_id + “_” + order</td><td></td></tr><tr><td>trace表</td><td>记录所有cpu、gpu计算的入参 + 出参</td><td>可使用UUID生成唯一的：trace_id，也可由第三方计算服务生成</td><td></td></tr></tbody></table><p>再次说明：<br>1、task + event + segment + trace，记录的是dag引擎的执行过程中的临时数据，执行完毕后，除了问题分析外，作用不太大。<br>2、不一定：非得使用mysql来存储数据，也可以采用：redis来存储数据。<br>3、根据task_id 和一些业务信息，完全可以计算出：event_id和segment_id。</p><h2 id="数据清理"><a href="#数据清理" class="headerlink" title="数据清理"></a>数据清理</h2><p>基于成本的考量，这些数据该如何自动过期呢？</p><p>1、若采用mysql存储：则可使用ab库 or 启动一定是任务，定期删除旧数据。<br>2、若采用redis做流程控制，则使用redis的数据过期机制来处理。</p><h2 id="Pipeline，配置表，采用：文档模型：cloud-process-pipeline"><a href="#Pipeline，配置表，采用：文档模型：cloud-process-pipeline" class="headerlink" title="Pipeline，配置表，采用：文档模型：cloud_process_pipeline"></a>Pipeline，配置表，采用：文档模型：cloud_process_pipeline</h2><p>一般情况下，不太可能分库分表。</p><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>long</td><td>库表id，自增</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr><tr><td>modify_time</td><td>datetime</td><td>修改时间</td></tr><tr><td>config_name</td><td>varchar(64)</td><td>英文名字</td></tr><tr><td>config_version</td><td>varchar(12)</td><td>版本号</td></tr><tr><td>last_version</td><td>int(1)</td><td>0：最新版 <br/> 1、非最新版<br/></td></tr><tr><td>config_meta</td><td>text</td><td>json config</td></tr><tr><td>config_type</td><td>int(1)</td><td>1:规则引擎 <br/>2:dag引擎 <br/>3、指令</td></tr><tr><td>config_status</td><td>int(1)</td><td>0：正式运行 <br/> 2、草稿<br/>9、废弃 &lt;&gt;</td></tr></tbody></table><h2 id="运行时，任务表：cloud-process-task"><a href="#运行时，任务表：cloud-process-task" class="headerlink" title="运行时，任务表：cloud_process_task"></a>运行时，任务表：cloud_process_task</h2><p>分库分表id为：task_id</p><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>long</td><td>库表id，自增</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr><tr><td>modify_time</td><td>datetime</td><td>修改时间</td></tr><tr><td>task_id</td><td>varchar(64)</td><td>自动生成的UUID，索引，唯一</td></tr><tr><td>task_params</td><td>text</td><td>任务请求参数</td></tr><tr><td>config_id</td><td>long</td><td>配置表</td></tr><tr><td>config_meta</td><td>text</td><td>json config</td></tr><tr><td>task_result</td><td>text</td><td>任务结果表</td></tr><tr><td>notify_url</td><td>varchar(2048)</td><td>回调关联信息，强烈建议：对于业务而言，具有唯一性</td></tr><tr><td>total_cost</td><td>int(10)</td><td>任务处理总耗时</td></tr><tr><td>task_status</td><td>char(1)</td><td>0：成功 <br/>1：正在进行 <br/>9：运行失败</td></tr></tbody></table><p>备注:</p><p>1、任何一个task，建议关联上所执行的pipeline配置，否则，容易出现：pipeline 更改后，对应的task未及时修正的情况。<br>2、如果需要整个任务重试，则建议：重新生成一个新的task,notify_url不变即可。<br>3、回调的协议，建议：双方约定好即可。</p><h2 id="运行时，事件表：cloud-process-event"><a href="#运行时，事件表：cloud-process-event" class="headerlink" title="运行时，事件表：cloud_process_event"></a>运行时，事件表：cloud_process_event</h2><p>分库分表id为：task_id</p><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>long</td><td>库表id，自增</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr><tr><td>modify_time</td><td>datetime</td><td>修改时间</td></tr><tr><td>task_id</td><td>varchar(64)</td><td>关联：cloud_process_task的task_id</td></tr><tr><td>trace_id</td><td>varchar(64)</td><td>可为空，不一定有值，若有值，则关联：cloud_process_trace的trace_id</td></tr><tr><td>event_id</td><td>varchar(128)</td><td>event_id &#x3D; task_id + “_” + node_name</td></tr><tr><td>node_name</td><td>varchar(64)</td><td>节点名称</td></tr><tr><td>node_type</td><td>int(2)</td><td>节点类型,参考<a href="#%E8%8A%82%E7%82%B9%E8%AE%BE%E8%AE%A1">节点设计</a>             。</td></tr><tr><td>event_status</td><td>char(1)</td><td>0：成功 <br/>1：正在进行 <br/>9：运行失败</td></tr><tr><td>exec_cnt</td><td>int(10)</td><td>执行次数，大部分情况下：1次,重试次数 &#x3D; 执行次数 - 1</td></tr><tr><td>latch_cnt</td><td>int(10)</td><td>当latch_cnt &#x3D;&#x3D; in_degree时，当前节点，可继续往下执行</td></tr><tr><td>segment_cnt</td><td>int(10)</td><td>分片数量,0：如果没有分片，则分片数量为：0,有分片，则输入对应的分片数量</td></tr><tr><td>event_result</td><td>text</td><td>事件结果表</td></tr><tr><td>total_cost</td><td>int(10)</td><td>事件处理总耗时</td></tr></tbody></table><h2 id="运行时，分片表：cloud-process-segment"><a href="#运行时，分片表：cloud-process-segment" class="headerlink" title="运行时，分片表：cloud_process_segment"></a>运行时，分片表：cloud_process_segment</h2><p>分库分表id为：task_id</p><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>long</td><td>库表id，自增</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr><tr><td>modify_time</td><td>datetime</td><td>修改时间</td></tr><tr><td>task_id</td><td>varchar(64)</td><td>关联：cloud_process_task的task_id</td></tr><tr><td>event_id</td><td>varchar(128)</td><td>event_id &#x3D; task_id + “_” + node_name</td></tr><tr><td>segment_id</td><td>varchar(256)</td><td>segment_id &#x3D; event_id + “_” + order</td></tr><tr><td>trace_id</td><td>varchar(64)</td><td>关联：cloud_process_trace的trace_id</td></tr><tr><td>segment_type</td><td>int(2)</td><td>正常情况下，跟它所对应的node_type一模一样</td></tr><tr><td>exec_cnt</td><td>int(10)</td><td>执行次数，大部分情况下：1次,重试次数 &#x3D; 执行次数 - 1</td></tr><tr><td>segment_order</td><td>int(10)</td><td>分片顺序号</td></tr><tr><td>segment_status</td><td>int(10)</td><td>0：成功 <br/>1：正在进行 <br/>9：运行失败</td></tr><tr><td>segment_result</td><td>text</td><td>分片结果表</td></tr><tr><td>total_cost</td><td>int(10)</td><td>分片处理总耗时</td></tr></tbody></table><h2 id="运行时，跟踪表：cloud-process-trace"><a href="#运行时，跟踪表：cloud-process-trace" class="headerlink" title="运行时，跟踪表：cloud_process_trace"></a>运行时，跟踪表：cloud_process_trace</h2><p>每请求一次，则新增一条记录，分库分表id为：task_id</p><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>long</td><td>库表id，自增</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr><tr><td>modify_time</td><td>datetime</td><td>修改时间</td></tr><tr><td>task_id</td><td>varchar(64)</td><td>关联：cloud_process_task的task_id</td></tr><tr><td>trace_id</td><td>varchar(128)</td><td>计算服务的跟踪id，唯一id</td></tr><tr><td>cal_type</td><td>int(2)</td><td>计算服务的类型</td></tr><tr><td>trace_status</td><td>int(10)</td><td>0：成功 <br/>1：正在进行 <br/>9：运行失败</td></tr><tr><td>request_params</td><td>text</td><td>请求参数</td></tr><tr><td>request_url</td><td>varchar(2048)</td><td>请求地址</td></tr><tr><td>response_result</td><td>text</td><td>响应报文</td></tr><tr><td>callback_result</td><td>text</td><td>回调报文</td></tr><tr><td>total_cost</td><td>int(10)</td><td>分片处理总耗时</td></tr></tbody></table><p>备注：</p><p>1、虽然将task_id作为分库分表的主键，但是，查询该表时，入参为：task_id、trace_id</p><h1 id="redis-key设计"><a href="#redis-key设计" class="headerlink" title="redis key设计"></a>redis key设计</h1><p><img src="/images/dag_redis_key_1.png"></p><p>备注：<br>1、Pipeline，配置表，强烈建议：由mysql来兜底，PS：当然前期，可以不设计该：key。<br>2、task、event、segment、trace表，本来就是临时数据，方便任务管理、追踪，因此，不建议存在mysql。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 媒体处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dag、Serverless Workflow、并发调度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资源调度</title>
      <link href="/posts/8e26567b.html"/>
      <url>/posts/8e26567b.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>云端图片、视频处理，非常费cpu or gpu，相对应的成本也非常的贵，因此，合理、有效、充分地调度好cpu、gpu资源显的尤为重要，毕竟，直接影响到成本。</p><h1 id="痛点梳理"><a href="#痛点梳理" class="headerlink" title="痛点梳理"></a>痛点梳理</h1><h2 id="监控指标不够细"><a href="#监控指标不够细" class="headerlink" title="监控指标不够细"></a>监控指标不够细</h2><p>工欲善其事，必先利其器，要想做好：资源调度，必先收集好：相关的指标数据，以便：数据化决策。在实际项目中，资源调度与数据指标是相互完善的过程。</p><table><thead><tr><th>类别</th><th>类别</th><th>备注</th></tr></thead><tbody><tr><td>pod指标</td><td>cpu利用率</td><td></td></tr><tr><td>pod指标</td><td>内存利用率</td><td></td></tr><tr><td>pod指标</td><td>集群的cpu核数</td><td></td></tr><tr><td>业务指标</td><td>图片处理个数</td><td></td></tr><tr><td>业务指标</td><td>视频处理个数</td><td></td></tr><tr><td>业务指标</td><td>输入视频时长</td><td></td></tr><tr><td>业务指标</td><td>处理时长&#x2F;视频时长</td><td></td></tr><tr><td>业务指标</td><td>处理时长</td><td></td></tr><tr><td>业务指标</td><td>计算成功率</td><td></td></tr><tr><td>业务指标</td><td>错误码占比</td><td></td></tr><tr><td>队列指标</td><td>队列堆积数</td><td></td></tr><tr><td>带宽指标</td><td>上传带宽</td><td></td></tr><tr><td>带宽指标</td><td>下载带宽</td><td></td></tr><tr><td>带宽指标</td><td>下载耗时</td><td></td></tr><tr><td>带宽指标</td><td>上传耗时</td><td></td></tr><tr><td>小文件存储</td><td>结果文件容量</td><td></td></tr><tr><td>小文件存储</td><td>结果文件个数</td><td></td></tr><tr><td>小文件存储</td><td>中间结果文件容量</td><td></td></tr><tr><td>小文件存储</td><td>中间结果文件个数</td><td></td></tr><tr><td>小文件存储</td><td>输入文件容量</td><td></td></tr><tr><td>小文件存储</td><td>输入文件个数</td><td></td></tr><tr><td>月度账单</td><td>耗费多少钱（目录价 + 真实价格）</td><td></td></tr></tbody></table><h2 id="负载不均"><a href="#负载不均" class="headerlink" title="负载不均"></a>负载不均</h2><p>1、因不同业务请求里面的图片、视频的复杂性，导致不同请求，所耗费的资源是不一样的，长时间跑起来，有可能会导致：有些cpu忙死，有些cpu闲死。<br>2、有些业务请求所包含的计算，是重cpu，例如：libx264转码，有些业务请求所包含的计算，是重IO，轻cpu，例如：视频合并。若调度不合理，会导致：忙的忙死，闲的闲死。<br>3、图片计算 与 视频计算，所费的资源是不一样的。因此，其pod所配置的并发数，也是不一样的。若配置不正确，极容易导致负载不均衡。</p><h2 id="波峰波谷"><a href="#波峰波谷" class="headerlink" title="波峰波谷"></a>波峰波谷</h2><p>大部分业务，都有此类特点，例如：晚上7点 ~ 晚上11点，波峰，但是：凌晨1点 ~ 凌晨7点，又是波谷。如果机器都按照：波峰时准备，那么，整个集群的利用率大概率不会超过：10%</p><h2 id="资源不够"><a href="#资源不够" class="headerlink" title="资源不够"></a>资源不够</h2><p>假如某一个业务量级突然之间暴涨，导致某个云上的所有GPU、CPU卡都不够了。此时，该如何处理？限流？不太合适吧？？</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>大体流程如下图所示：<br><img src="/images/rs_d_1.png"></p><p>说明：<br>1、为啥需要MQ代理消费，请参考：算法、模型工程化相对应的章节。<br>2、请尽量单元化部署，毕竟：小文件存储的公网带宽，很贵，真的很贵。<br>3、以下策略，请根据实际情况，相互配合使用。</p><h2 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h2><p>如今2024年了，应该没人继续使用物理机了吧？至少都是：K8S，或者上云。</p><h2 id="设置合理阈值"><a href="#设置合理阈值" class="headerlink" title="设置合理阈值"></a>设置合理阈值</h2><p>不断地根据：监控指标 + 账单，不断地调整阈值。</p><h2 id="资源分类"><a href="#资源分类" class="headerlink" title="资源分类"></a>资源分类</h2><p>不同的业务请求，有不同的特点。例如：面对以下业务场景：</p><table><thead><tr><th>业务</th><th>特点</th><th>备注</th></tr></thead><tbody><tr><td>社区相关：264转码</td><td>feed发布完，1min内处理完</td><td></td></tr><tr><td>社区相关：265转码</td><td>feed发布完，播放数超过多少时处理完，<br/> 达人用户发布的视频，1min内处理完</td><td></td></tr><tr><td>社区相关： 视频加水印</td><td>24小时处理完即可</td><td></td></tr><tr><td>社区相关：多码率</td><td>24小时处理完即可</td><td></td></tr><tr><td>视频meta信息查询</td><td>200ms以内，越快越好</td><td></td></tr><tr><td>图片meta信息查询</td><td>100ms以内，越快越好</td><td></td></tr><tr><td>工具相关：画质修复</td><td>分钟级处理完，或者：处理时长&#x2F;视频时长 &#x3D; 0.5</td><td></td></tr><tr><td>工具相关：超分</td><td>分钟级处理完，或者：处理时长&#x2F;视频时长 &#x3D; 0.5</td><td></td></tr></tbody></table><p>需对cpu池子 + gpu池子，按照业务场景，进行分类。例如：以下仅仅只是举个例子，实际情况，根据实际业务来区分</p><table><thead><tr><th>topic</th><th>单个cpu核数</th><th>pod处理并发数</th><th>调度策略</th><th>备注</th></tr></thead><tbody><tr><td>video_0</td><td>8核</td><td>1</td><td>频繁</td><td></td></tr><tr><td>video_1</td><td>4核</td><td>1</td><td>次频繁</td><td></td></tr><tr><td>video_2</td><td>4核</td><td>1</td><td>凌晨频繁</td><td></td></tr><tr><td>img_0</td><td>8核</td><td>4</td><td>频繁</td><td></td></tr><tr><td>img_1</td><td>4核</td><td>4</td><td>次频繁</td><td></td></tr><tr><td>img_2</td><td>4核</td><td>4</td><td>凌晨频繁</td><td></td></tr></tbody></table><h2 id="被动调度"><a href="#被动调度" class="headerlink" title="被动调度"></a>被动调度</h2><p>监听某个指标，如果大于预设的值，则采取某种扩容策略，小于预设的值，则采取缩容的策略。举些例子：</p><p>策略1：监听cpu的使用率，如果长时间高于60%，则逐步扩容多少个pod，反之，亦然。<br>策略2：监听内存使用率，如果长时间高于：90%，则逐步扩容多少个pod，反之，亦然。<br>策略3：从某个监控指标上（例如：grafana or 普罗米修斯） 获取数据，如果某个指标大于某个预设的值，则逐步扩容多少个pod，反之，亦然。<br>策略4：从kafka的堆积lag数获取数据，如果大于某个预设的值，则逐步扩容多少个pod，反之，亦然。</p><h2 id="主动调度"><a href="#主动调度" class="headerlink" title="主动调度"></a>主动调度</h2><p>业务代码（例如：网关处），分析业务指标（例如：输入视频的时长、输入视频的大小） + 监控指标（当前cpu池子的负载情况），主动创建合适的cpu池子，来处理当前的业务请求。</p><h2 id="定时调度"><a href="#定时调度" class="headerlink" title="定时调度"></a>定时调度</h2><p>既然业务有波峰 + 波谷的特点，那么，可以按照业务的波峰波谷的时间，定时扩缩容cpu or gpu 池子。举个例子：</p><table><thead><tr><th>时间区间</th><th>操作</th><th>pod 区间</th><th>备注</th></tr></thead><tbody><tr><td>凌晨1点 ~ 凌晨7点</td><td>缩容</td><td>1 &lt; pod个数 &lt; 10</td><td></td></tr><tr><td>早上8点 ~ 早点12点</td><td>扩容</td><td>5 &lt; pod个数 &lt; 50</td><td></td></tr><tr><td>中午12点 ~ 下午14点</td><td>缩容</td><td>2 &lt; pod个数 &lt; 20</td><td></td></tr><tr><td>中午15点 ~ 下午17点</td><td>不变</td><td>2 &lt; pod个数 &lt; 20</td><td></td></tr><tr><td>中午17点 ~ 下午19点</td><td>扩容</td><td>10 &lt; pod个数 &lt; 60</td><td></td></tr><tr><td>中午19点 ~ 下午22点</td><td>扩容</td><td>60 &lt; pod个数 &lt; 120</td><td></td></tr><tr><td>中午22点 ~ 凌晨1点</td><td>缩容</td><td>1 &lt; pod个数 &lt; 10</td><td></td></tr></tbody></table><p>备注：<br>1、以上仅仅只是举个例子，具体配置，得根据具体项目来分析。</p><h2 id="同卡调度"><a href="#同卡调度" class="headerlink" title="同卡调度"></a>同卡调度</h2><p>在视频切片加速的场景下，同一个视频的不同片，需跑在同一种卡类型下，否则，会导致：花屏、黑屏等奇奇怪怪的问题（目前原因不明，有可能是不同型号的硬件，在细微差异上有问题）。因此，此时，需要对同一个视频的不同片，调度在同一种卡类型上。</p><h2 id="多云调度"><a href="#多云调度" class="headerlink" title="多云调度"></a>多云调度</h2><h2 id="超卖"><a href="#超卖" class="headerlink" title="超卖"></a>超卖</h2><h2 id="固定资源池-可变资源池"><a href="#固定资源池-可变资源池" class="headerlink" title="固定资源池 + 可变资源池"></a>固定资源池 + 可变资源池</h2>]]></content>
      
      
      <categories>
          
          <category> 媒体处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成本 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
